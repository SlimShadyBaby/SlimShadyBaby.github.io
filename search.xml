<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql基本操作</title>
      <link href="/2020/11/30/mysql-ji-ben-cao-zuo/"/>
      <url>/2020/11/30/mysql-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysq基本操作"><a href="#Mysq基本操作" class="headerlink" title="Mysq基本操作"></a>Mysq基本操作</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE DATABASE test;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows安装mysql5.7</title>
      <link href="/2020/11/30/windows-an-zhuang-mysql5-7/"/>
      <url>/2020/11/30/windows-an-zhuang-mysql5-7/</url>
      
        <content type="html"><![CDATA[<h2 id="下载mysql"><a href="#下载mysql" class="headerlink" title="下载mysql"></a>下载mysql</h2><ol><li><p>进入<a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">mysql</a>官网</p><p> <img src="mysqldownload.png" alt="下载"></p></li><li><p>解压缩到D盘</p><p> <img src="unzip.png" alt="解压缩"></p></li><li><p>添加系统环境变量</p><pre class="line-numbers language-bat"><code class="language-bat"> D:\mysql-5.7.31\bin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><ol><li><p>新增<code>my.ini</code>文件，写入以下内容：</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector"> [mysql]</span> #设置mysql客户端默认字符集<span class="token constant"> default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token selector"> [mysqld]</span> #设置3306端口<span class="token constant"> port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span> #设置mysql的安装目录<span class="token constant"> basedir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\mysql-5.7.31-winx64</span> #设置mysql数据库的数据的存放目录<span class="token constant"> datadir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\mysql-5.7.31-winx64\data</span> #允许最大连接数<span class="token constant"> max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>200</span> #服务端使用的字符集默认为8比特编码的latin1字符集<span class="token constant"> character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span> #创建新表时将使用的默认存储引擎<span class="token constant"> default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><ol><li><p>以管理员的身份进入<code>cmd</code>，依次执行如下命令：</p><pre class="line-numbers language-cmd"><code class="language-cmd"> mysqld install net start mysql mysqld --initialize-insecure --user=mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql"> C:\Windows\system32>d: D:\>cd mysql-5.7.31-winx64 D:\mysql-5.7.31-winx64>cd bin D:\mysql-5.7.31-winx64\bin> D:\mysql-5.7.31-winx64\bin>mysqld install Service successfully installed. D:\mysql-5.7.31-winx64\bin>net start mysql MySQL 服务正在启动 . MySQL 服务无法启动。 服务没有报告任何错误。 请键入 NET HELPMSG 3534 以获得更多的帮助。 D:\mysql-5.7.31-winx64\bin>mysqld --initialize-insecure --user=mysql mysqld: Can't create directory 'D:\mysql-5.7.31\data\' (Errcode: 2 - No such fil e or directory) 2020-11-30T13:32:03.617118Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see doc umentation for more details). 2020-11-30T13:32:03.625119Z 0 [ERROR] Can't find error-message file 'D:\mysql-5. 7.31\share\errmsg.sys'. Check error-message file location and 'lc-messages-dir' configuration directive. 2020-11-30T13:32:03.629119Z 0 [ERROR] Aborting # 如果报以上错误，多半是ini中data目录配置的不对，需检查一下 D:\mysql-5.7.31-winx64\bin> D:\mysql-5.7.31-winx64\bin>mysqld --initialize-insecure --user=mysql D:\mysql-5.7.31-winx64\bin>net start mysql MySQL 服务正在启动 . MySQL 服务已经启动成功。 # 默认密码为空 D:\mysql-5.7.31-winx64\bin>mysql -u root -p Enter password: Welcome to the MySQL monitor.  Commands end with ; or \g. Your MySQL connection id is 4 Server version: 5.7.31 MySQL Community Server (GPL) Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. mysql><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><p>安装完成后查看编码:</p><pre class="line-numbers language-mysql"><code class="language-mysql"> show variables like 'character_set%'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="charset.png" alt="查看编码"></p></li><li><p>修改默认密码，默认密码为空:</p><pre class="line-numbers language-mysql"><code class="language-mysql"> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="modify_pd.png" alt="修改密码"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github克隆太慢问题</title>
      <link href="/2020/11/30/github-ke-long-tai-man-wen-ti/"/>
      <url>/2020/11/30/github-ke-long-tai-man-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="解决github克隆太慢的问题"><a href="#解决github克隆太慢的问题" class="headerlink" title="解决github克隆太慢的问题"></a>解决github克隆太慢的问题</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>git clone特别慢是因为github.global.ssl.fastly.net域名被限制了。<br>只要找到这个域名对应的ip地址，然后在hosts文件中加上ip–&gt;域名的映射，刷新DNS缓存便可。</p><h3 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h3><ol><li><p>打开网址<a href="https://github.com.ipaddress.com/" target="_blank" rel="noopener">https://github.com.ipaddress.com/</a>，分别搜索</p><pre class="line-numbers language-bash"><code class="language-bash"> github.global.ssl.fastly.net github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>得到ip</p><p> <img src="domain.png" alt="github.com"></p></li><li><p>写入hosts</p><p> <img src="hosts.png" alt="hosts"></p><pre class="line-numbers language-bash"><code class="language-bash"> 199.232.69.194  github.global-ssl.fastly.net 140.82.114.4  github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>刷新缓存<br> 打开cmd，执行如下命令</p><pre class="line-numbers language-cmd"><code class="language-cmd"> ipconfig /flushdns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka-java-api</title>
      <link href="/2020/11/17/kafka-java-api-001/"/>
      <url>/2020/11/17/kafka-java-api-001/</url>
      
        <content type="html"><![CDATA[<h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka安装</title>
      <link href="/2020/11/17/kafka-an-zhuang/"/>
      <url>/2020/11/17/kafka-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网下载地址：<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.6.0/kafka_2.13-2.6.0.tgz" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.cgi?path=/kafka/2.6.0/kafka_2.13-2.6.0.tgz</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>下载</p><pre class="line-numbers language-linux"><code class="language-linux"> [bbd@shucang01 hulin]$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/kafka/2.6.0/kafka_2.13-2.6.0.tgz [bbd@shucang01 hulin]$ ls kafka_2.13-2.6.0.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>解压</p><pre class="line-numbers language-linux"><code class="language-linux"> [bbd@shucang01 hulin]$ tar -xzvf kafka_2.13-2.6.0.tgz ... ... kafka_2.13-2.6.0/libs/rocksdbjni-5.18.4.jar kafka_2.13-2.6.0/libs/kafka-streams-scala_2.13-2.6.0.jar kafka_2.13-2.6.0/libs/kafka-streams-test-utils-2.6.0.jar kafka_2.13-2.6.0/libs/kafka-streams-examples-2.6.0.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加环境变量：<code>vi /etc/profile</code></p><pre class="line-numbers language-linux"><code class="language-linux"> export KAFKA_HOME=/home/bbd/hulin/kafka_2.13-2.6.0 export ZK_HOME=/home/bbd/hulin/apache-zookeeper-3.6.2-bin export PATH=$PATH:$KAFKA_HOME/bin:$ZK_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改配置文件 <code>$KAFKA_HOME/conf/server.properties</code></p><pre class="line-numbers language-linux"><code class="language-linux"> # 集群中每个brokerid需要不同 broker.id=0 # broker对外提供服务的地址 listeners=PLAINTEXT://10.28.200.233:9092 # 存放消息日志文件的地址 log.dirs=/data1/hulin/kafka-logs # zk地址 zookeeper.connect=10.28.200.233:2181,10.28.200.234:2181,10.28.200.235:2181/kafka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改其他机器</p><pre class="line-numbers language-linux"><code class="language-linux"> scp -P 51668 -r kafka_2.13-2.6.0 bbd@10.28.200.234:`pwd` # 集群中每个brokerid需要不同 broker.id=2 # broker对外提供服务的地址 listeners=PLAINTEXT://10.28.200.234:9092 # 存放消息日志文件的地址 log.dirs=/data1/hulin/kafka-logs # zk地址 zookeeper.connect=10.28.200.233:2181,10.28.200.234:2181,10.28.200.235:2181/kafka scp -P 51668 -r kafka_2.13-2.6.0 bbd@10.28.200.235:`pwd` # 集群中每个brokerid需要不同 broker.id=3 # broker对外提供服务的地址 listeners=PLAINTEXT://10.28.200.235:9092 # 存放消息日志文件的地址 log.dirs=/data1/hulin/kafka-logs # zk地址 zookeeper.connect=10.28.200.233:2181,10.28.200.234:2181,10.28.200.235:2181/kafka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动</p><pre class="line-numbers language-linux"><code class="language-linux"> kafka-server-start.sh -daemon /home/bbd/hulin/kafka_2.13-2.6.0/config/server.properties 或者 kafka-server-start.sh /home/bbd/hulin/kafka_2.13-2.6.0/config/server.properties &<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看kafka进程 <code>jps -l</code></p><pre class="line-numbers language-linux"><code class="language-linux"> [bbd@shucang02 config]$ jps -l 29473 kafka.Kafka 如果没有出现kafka.Kafka进程，前台启动，然后看日志报错解决即可，有可能是配置文件没有写对，或者是文件的权限不足<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意启动的时候保持<code>logs.dir</code>文件夹是空的，不然可能无法启动</p></li></ol><h2 id="生产与消费"><a href="#生产与消费" class="headerlink" title="生产与消费"></a>生产与消费</h2><ol><li><p>创建一个分区为4，副本因子为3的主题</p><pre class="line-numbers language-linux"><code class="language-linux"> [bbd@shucang01 ~]$ kafka-topics.sh --zookeeper 10.28.200.233:2181,10.28.200.234:2181,10.28.200.235:2181/kafka --create --topic topic-demo --replication-factor 3 --partitions 4 Created topic topic-demo.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看分区信息</p><pre class="line-numbers language-linu"><code class="language-linu"> [bbd@shucang01 ~]$ kafka-topics.sh --zookeeper 10.28.200.233:2181,10.28.200.234:2181,10.28.200.235:2181/kafka --describe --topic topic-demo Topic: topic-demo   PartitionCount: 4   ReplicationFactor: 3    Configs: Topic: topic-demo   Partition: 0    Leader: 0    Replicas: 0,1,2    Isr: 0,1,2 Topic: topic-demo   Partition: 1    Leader: 1    Replicas: 1,2,0    Isr: 1,2,0 Topic: topic-demo   Partition: 2    Leader: 2    Replicas: 2,0,1    Isr: 2,0,1 Topic: topic-demo   Partition: 3    Leader: 0    Replicas: 0,2,1    Isr: 0,2,1 [bbd@shucang01 ~]$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生产消息<br> 新版的kafka使用–bootstrap-server时，端口号使用<code>9092</code>，不然无法访问</p><pre class="line-numbers language-linux"><code class="language-linux"> [bbd@shucang01 ~]$ kafka-console-producer.sh --bootstrap-server 10.28.200.233:9092,10.28.200.234:9092,10.28.200.235:9092 --topic topic-demo -> Hello,Kafka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>消费消息</p><pre class="line-numbers language-linux"><code class="language-linux"> [bbd@shucang01 ~]$ kafka-console-consumer.sh --bootstrap-server 10.28.200.233:9092,10.28.200.234:9092,10.28.200.235:9092 --topic topic-demo Hello,Kafka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2020/11/17/git-chang-yong-ming-ling/"/>
      <url>/2020/11/17/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="合并commit"><a href="#合并commit" class="headerlink" title="合并commit"></a>合并commit</h2>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper-Java-Api</title>
      <link href="/2020/11/15/zookeeper-java-api-001/"/>
      <url>/2020/11/15/zookeeper-java-api-001/</url>
      
        <content type="html"><![CDATA[<h2 id="创建会话"><a href="#创建会话" class="headerlink" title="创建会话"></a>创建会话</h2><h3 id="创建基本的会话"><a href="#创建基本的会话" class="headerlink" title="创建基本的会话"></a>创建基本的会话</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hulin<span class="token punctuation">.</span>zk<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>WatchedEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>Watcher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>ZooKeeper<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCreateSession</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ZooKeeper zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"10.28.200.233:2181"</span><span class="token punctuation">,</span>                <span class="token number">5000</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MyCreateSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zooKeeper<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zookeeper Session established"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"received watched event:"</span> <span class="token operator">+</span> watchedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected <span class="token operator">==</span> watchedEvent<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-java"><code class="language-java">CONNECTINGreceived watched event<span class="token operator">:</span>WatchedEvent state<span class="token operator">:</span>SyncConnected type<span class="token operator">:</span>None path<span class="token operator">:</span>null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建复用的会话连接"><a href="#创建复用的会话连接" class="headerlink" title="创建复用的会话连接"></a>创建复用的会话连接</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hulin<span class="token punctuation">.</span>zk<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>WatchedEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>Watcher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>ZooKeeper<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCreateUsageSession</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ZooKeeper zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"10.28.200.233:2181"</span><span class="token punctuation">,</span>                <span class="token number">5000</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MyCreateUsageSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> sessionID <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">getSessionPasswd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Use illegal SessionId and SessionPassWd</span>        zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"10.28.200.233:2181"</span><span class="token punctuation">,</span>                <span class="token number">5000</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MyCreateSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                1L<span class="token punctuation">,</span>                <span class="token string">"test"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Use correct SessionId and SessionPassWd</span>        zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"10.28.200.233:2181"</span><span class="token punctuation">,</span>                <span class="token number">5000</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MyCreateSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                sessionID<span class="token punctuation">,</span>                password<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"received watched event:"</span> <span class="token operator">+</span> watchedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected <span class="token operator">==</span> watchedEvent<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-java"><code class="language-java">received watched event<span class="token operator">:</span>WatchedEvent state<span class="token operator">:</span>SyncConnected type<span class="token operator">:</span>None path<span class="token operator">:</span>nullreceived watched event<span class="token operator">:</span>WatchedEvent state<span class="token operator">:</span>Disconnected type<span class="token operator">:</span>None path<span class="token operator">:</span>nullreceived watched event<span class="token operator">:</span>WatchedEvent state<span class="token operator">:</span>SyncConnected type<span class="token operator">:</span>None path<span class="token operator">:</span>null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步</span>String <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">final</span> String path<span class="token punctuation">,</span> <span class="token keyword">byte</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> List<span class="token operator">&lt;</span>ACL<span class="token operator">></span> acl<span class="token punctuation">,</span> CreateMode createMode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 异步</span><span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">final</span> String path<span class="token punctuation">,</span> <span class="token keyword">byte</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> List<span class="token operator">&lt;</span>ACL<span class="token operator">></span> acl<span class="token punctuation">,</span> CreateMode createMode<span class="token punctuation">,</span> StringCallback cb<span class="token punctuation">,</span> Object ctx<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>path</code> 创建的数据节点的节点路径，例如，/zk-book/fool</li><li><code>data[]</code> 字节数组，是节点创建后的初始内容</li><li><code>acl</code> 节点的ACL策略<ul><li><code>Ids.OPEN_ACL_UNSAFE</code>：完全开放</li><li><code>Ids.CREATOR_ALL_ACL</code>：创建该znode的连接拥有所有权限</li><li><code>Ids.READ_ACL_UNSAFE</code>：所有的客户端都可读</li></ul></li><li><code>createMode</code> 节点类型<ul><li><code>CreateMode.EPHEMERAL</code>: 临时</li><li><code>CreateMode.EPHEMERAL_SEQUENTIAL</code>: 临时顺序</li><li><code>CreateMode.PERSISTENT</code>: 持久</li><li><code>CreateMode.PERSISTENT_SEQUENTIAL</code>: 持久顺序</li></ul></li><li><code>cb</code> 异步回调函数</li><li><code>ctx</code> 传递一个对象，通常是一个上下文（Context）信息</li></ul><h3 id="使用同步方法创建一个节点"><a href="#使用同步方法创建一个节点" class="headerlink" title="使用同步方法创建一个节点"></a>使用同步方法创建一个节点</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hulin<span class="token punctuation">.</span>zk<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateSyncNode</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch downLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ZooKeeper zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"10.28.200.233:2181"</span><span class="token punctuation">,</span>                <span class="token number">5000</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">CreateSyncNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        downLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path1 <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/zk-test-ephemeral"</span><span class="token punctuation">,</span>                <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span>                CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Success created znode"</span> <span class="token operator">+</span> path1<span class="token punctuation">)</span><span class="token punctuation">;</span>        String path2 <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/zk-test-ephemeral-"</span><span class="token punctuation">,</span>                <span class="token string">"456"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span>                CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Success created znode"</span> <span class="token operator">+</span> path2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected <span class="token operator">==</span> watchedEvent<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            downLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-java"><code class="language-java">Success created znode<span class="token operator">/</span>zk<span class="token operator">-</span>test<span class="token operator">-</span>ephemeralSuccess created znode<span class="token operator">/</span>zk<span class="token operator">-</span>test<span class="token operator">-</span>ephemeral<span class="token operator">-</span><span class="token number">0000000006</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用异步创建节点"><a href="#使用异步创建节点" class="headerlink" title="使用异步创建节点"></a>使用异步创建节点</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hulin<span class="token punctuation">.</span>zk<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateAsyncNode</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ZooKeeper zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"10.28.200.233:2181"</span><span class="token punctuation">,</span>                <span class="token number">5000</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">CreateAsyncNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/zk-test-ephemeral-"</span><span class="token punctuation">,</span>                <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span>                CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MyStringCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"I am context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/zk-test-ephemeral-"</span><span class="token punctuation">,</span>                <span class="token string">"456"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span>                CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MyStringCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"I am context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/zk-test-ephemeral-"</span><span class="token punctuation">,</span>                <span class="token string">"789"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span>                CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MyStringCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"I am Context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected <span class="token operator">==</span> watchedEvent<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>AsyncCallback<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStringCallback</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncCallback<span class="token punctuation">.</span>StringCallback</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> rc<span class="token punctuation">,</span> String path<span class="token punctuation">,</span> Object ctx<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Create path result: ["</span> <span class="token operator">+</span> rc <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">", "</span>                <span class="token operator">+</span> ctx <span class="token operator">+</span> <span class="token string">"，real path name:"</span> <span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回结果</p><pre class="line-numbers language-java"><code class="language-java">Create path result<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">/</span>zk<span class="token operator">-</span>test<span class="token operator">-</span>ephemeral<span class="token operator">-</span><span class="token punctuation">,</span> I am context，real path name<span class="token operator">:</span><span class="token operator">/</span>zk<span class="token operator">-</span>test<span class="token operator">-</span>ephemeral<span class="token operator">-</span>Create path result<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token operator">/</span>zk<span class="token operator">-</span>test<span class="token operator">-</span>ephemeral<span class="token operator">-</span><span class="token punctuation">,</span> I am contex，treal path name<span class="token operator">:</span>nullCreate path result<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">/</span>zk<span class="token operator">-</span>test<span class="token operator">-</span>ephemeral<span class="token operator">-</span><span class="token punctuation">,</span> I am Context，real path name<span class="token operator">:</span><span class="token operator">/</span>zk<span class="token operator">-</span>test<span class="token operator">-</span>ephemeral<span class="token operator">-</span><span class="token number">0000000009</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="异步回调参数详解"><a href="#异步回调参数详解" class="headerlink" title="异步回调参数详解"></a>异步回调参数详解</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">processResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> rc<span class="token punctuation">,</span> String path<span class="token punctuation">,</span> Object ctx<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>rc</code> 服务端响应码: ResultCode<ul><li><code>0</code>：接口调用成功</li><li><code>-4</code>：客户端和服务端连接已断开</li><li><code>-110</code>：指定节点已存在</li><li><code>-112</code>：会话已过期</li></ul></li><li><code>path</code> 节点路径</li><li><code>ctx</code> 接口调用时传入的ctx值</li><li><code>name</code> 实际的在服务端创建的节点名</li></ul><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><h3 id="获取子节点"><a href="#获取子节点" class="headerlink" title="获取子节点"></a>获取子节点</h3><h4 id="getChildren构造方法"><a href="#getChildren构造方法" class="headerlink" title="getChildren构造方法"></a>getChildren构造方法</h4><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hulin<span class="token punctuation">.</span>zk<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGetChildren</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> CountDownLatch count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ZooKeeper zooKeeper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用集群模式，且默认的根目录是/hulin</span>        zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"10.28.200.233:2181,10.28.200.234:2181,10.28.200.235:2181/hulin"</span><span class="token punctuation">,</span>                <span class="token number">5000</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MyGetChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/mynode/node1"</span><span class="token punctuation">,</span>                <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span>                CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">"/mynode"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/mynode/node2"</span><span class="token punctuation">,</span>                <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span>                CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected <span class="token operator">==</span> event<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>None <span class="token operator">==</span> event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> null <span class="token operator">==</span> event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>NodeChildrenChanged <span class="token operator">==</span> event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ReGet Child:"</span> <span class="token operator">+</span> zooKeeper<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeeperException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>ReGet Child<span class="token operator">:</span><span class="token punctuation">[</span>node2<span class="token punctuation">,</span> node1<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到第一次创建的节点的时候，没有订阅子节点变化的通知，所以没有打印子节点变化的信息</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper节点操作</title>
      <link href="/2020/11/15/zookeeper-jie-dian-cao-zuo/"/>
      <url>/2020/11/15/zookeeper-jie-dian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>使用<code>create</code>命令可以创建Zookeeper节点，用法如下：</p><blockquote><p>create [-s] [-e] path data acl</p></blockquote><ul><li>-s 表示顺序节点</li><li>-e 表示临时节点</li><li>path表示节点的路径</li><li>data表示节点的数据</li><li>acl表示节点的 ACL 策略。</li><li>默认创建的是持久节点</li></ul><pre class="line-numbers language-bash"><code class="language-bash">// 进入zk客户端工具<span class="token punctuation">[</span>bbd@shucang03 bin<span class="token punctuation">]</span>$ sh zkCli.sh// 查看create帮助信息<span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 1<span class="token punctuation">]</span> createcreate <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token punctuation">]</span> <span class="token punctuation">[</span>-c<span class="token punctuation">]</span> <span class="token punctuation">[</span>-t ttl<span class="token punctuation">]</span> path <span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token punctuation">[</span>acl<span class="token punctuation">]</span>// 创建一个节点<span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 2<span class="token punctuation">]</span> create /zk-book 123Created /zk-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ol><li><p>使用ls命令，可以查看指定路径下的节点</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 3<span class="token punctuation">]</span> <span class="token function">ls</span> <span class="token function">ls</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> path <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 4<span class="token punctuation">]</span> <span class="token function">ls</span> / <span class="token punctuation">[</span>zk-book, zookeeper<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 可以看到，zookeeper服务启动会在根目录下，默认创建一个叫做<code>zookeeper</code>的保留节点</p></li></ol><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><ol><li><p><code>get</code>，获取指定节点的数据内容和属性</p><blockquote><p>get [-s] [-w] path</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 5<span class="token punctuation">]</span> get /zk-book 123 <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 7<span class="token punctuation">]</span> get get <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span> path <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 8<span class="token punctuation">]</span> get -s -w /zk-book 123 cZxid <span class="token operator">=</span> 0x200000002 // 创建节点的事务ID ctime <span class="token operator">=</span> Sun Nov 15 17:42:43 CST 2020 mZxid <span class="token operator">=</span> 0x200000002 // 最后一次更新节点的事务ID mtime <span class="token operator">=</span> Sun Nov 15 17:42:43 CST 2020 pZxid <span class="token operator">=</span> 0x200000002 cversion <span class="token operator">=</span> 0 dataVersion <span class="token operator">=</span> 0 aclVersion <span class="token operator">=</span> 0 ephemeralOwner <span class="token operator">=</span> 0x0 dataLength <span class="token operator">=</span> 3 numChildren <span class="token operator">=</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 可以看到保留节点是没有内容的<br> <img src="get.png" alt="节点操作"></p></li></ol><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ol><li><p><code>set</code>,更新节点数据</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 10<span class="token punctuation">]</span> <span class="token keyword">set</span> /zk-book 2333 WATCHER:: WatchedEvent state:SyncConnected type:NodeDataChanged path:/zk-book <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 11<span class="token punctuation">]</span> get -s -w /zk-book 2333 cZxid <span class="token operator">=</span> 0x200000002 ctime <span class="token operator">=</span> Sun Nov 15 17:42:43 CST 2020 mZxid <span class="token operator">=</span> 0x200000003 // 更新节点后，事务ID+1 mtime <span class="token operator">=</span> Sun Nov 15 17:54:35 CST 2020 pZxid <span class="token operator">=</span> 0x200000002 cversion <span class="token operator">=</span> 0 dataVersion <span class="token operator">=</span> 1 aclVersion <span class="token operator">=</span> 0 ephemeralOwner <span class="token operator">=</span> 0x0 dataLength <span class="token operator">=</span> 4 numChildren <span class="token operator">=</span> 0 <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 12<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>可以看到，更新节点后<code>mZxid</code>+1，<code>dataVersion</code>+1</li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ol><li><p><code>delete</code>，删除节点信息</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 13<span class="token punctuation">]</span> delete /zk-book WATCHER:: WatchedEvent state:SyncConnected type:NodeDeleted path:/zk-book <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 14<span class="token punctuation">]</span> <span class="token function">ls</span> / <span class="token punctuation">[</span>zookeeper<span class="token punctuation">]</span> <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 15<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一天一个linux命令——du</title>
      <link href="/2020/11/15/yi-tian-yi-ge-linux-ming-ling-du/"/>
      <url>/2020/11/15/yi-tian-yi-ge-linux-ming-ling-du/</url>
      
        <content type="html"><![CDATA[<h1 id="du命令详解"><a href="#du命令详解" class="headerlink" title="du命令详解"></a>du命令详解</h1><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="查看文件夹大小"><a href="#查看文件夹大小" class="headerlink" title="查看文件夹大小"></a>查看文件夹大小</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>bbd@shucang01 ~<span class="token punctuation">]</span>$ <span class="token function">du</span> -h -d 11.8G    ./liudequan4.0K    ./.oracle_jre_usage16K    ./.ssh0    ./.beeline32M    ./hulin0    ./.pki440M    ./tools307M    ./software4.0K    ./.vim2.5G    <span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看文件夹所属分区"><a href="#查看文件夹所属分区" class="headerlink" title="查看文件夹所属分区"></a>查看文件夹所属分区</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>bbd@shucang01 data1<span class="token punctuation">]</span>$ <span class="token function">df</span> /homeFilesystem     1K-blocks    Used Available Use% Mounted on/dev/sda5       86987268 8263112  78724156  10% /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="查看文件系统分区情况"><a href="#查看文件系统分区情况" class="headerlink" title="查看文件系统分区情况"></a>查看文件系统分区情况</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>bbd@shucang01 data1<span class="token punctuation">]</span>$ <span class="token function">df</span> -lhFilesystem      Size  Used Avail Use% Mounted on/dev/sda5        83G  7.9G   76G  10% /devtmpfs        3.9G     0  3.9G   0% /devtmpfs           3.9G     0  3.9G   0% /dev/shmtmpfs           3.9G   34M  3.8G   1% /runtmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup/dev/sda1       509M  128M  382M  26% /boot/dev/sda2       512M   16K  512M   1% /boot/efitmpfs           783M     0  783M   0% /run/user/0/dev/sdb        500G   33M  500G   1% /data1tmpfs           783M     0  783M   0% /run/user/1001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 磁盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper配置详解</title>
      <link href="/2020/11/15/zookeeper-pei-zhi-xiang-jie/"/>
      <url>/2020/11/15/zookeeper-pei-zhi-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>zookeeper基本配置包括三个<code>clientPort</code>，<code>daraDir</code>，<code>tickTime</code></p><ol><li><p><code>clientPort</code>:</p><ul><li>表示当前服务器的对外服务端口，客户端可以通过该端口和zookeeper服务器创建连接，一般设置为<code>2181</code>;</li><li>每台服务器都可以配置任意可用端口，同时，集群中的所有服务器不需要保持clientPort端口一致;</li><li>该参数没有默认值，必须配置，不支持系统属性配置方式{<code>启动时通过命令行添加</code>};</li><li>zoo.cfg配置文件一般设定了默认值<code>2181</code>，不用修改.</li></ul></li><li><p><code>dataDir</code>:</p><ul><li>该参数没有默认值，必须配置，不支持系统属性配置方式{<code>启动时通过命令行添加</code>};</li><li>该参数用于配置zookeeper服务器存储快照文件的目录;如果没有配置参数<code>dataLogDir</code>，事务日志也会存储在同一个目录中.</li></ul></li><li><p><code>tickTime</code>:</p><ul><li>该参数有默认值:3000， 单位是毫秒， 可选配置，不支持系统属性配置方式{<code>启动时通过命令行添加</code>};</li><li>该参数时zookeeper的最小时间单元长度，很多运行时的时间间隔都是使用<code>tickTime</code>的倍数来表示的;例如，回话最小超时时间默认是<code>2*tickTime</code>.</li></ul></li></ol><h3 id="高级参数配置"><a href="#高级参数配置" class="headerlink" title="高级参数配置"></a>高级参数配置</h3><ol><li><p><code>dataLogDir</code>:</p><ul><li>该参数有默认值，默认值和<code>dataDir</code>目录一致，可选配置，不支持系统属性配置方式{<code>启动时通过命令行添加</code>};</li><li>zookeeper在返回客户端的请求前，必须将<code>事务的日志写入磁盘</code>，保证数据的一致性，因此对磁盘的写性能要求非常高，因此最好和快照目录分开，且配置成一个单独的磁盘或者挂载点，可以显著的提高zookeeper的性能.</li></ul></li><li><p><code>initLimit</code>:</p><ul><li>该参数有默认值<code>10</code>，表示10倍的<code>tickTime</code>，必须是正整数，不支持系统属性配置方式;</li><li>该参数用于<code>leader服务器等待follower服务器启动，并完成数据同步的时间</code>; 例如当一个新的机器加入集群，首先需要与leader建立连接并同步leader服务器的数据，从而确定对外提供服务的起始状态;</li><li>如果集群数据量规模增大，会出现无法在较短时间内完成同步的问题，这样就必须适当的增大该参数的值.</li></ul></li><li><p><code>syncLimit</code>:</p><ul><li>该参数有默认值<code>5</code>，表示5倍的<code>tickTime</code>，必须是正整数，不支持系统属性配置方式;</li><li>该参数表示Leader服务器和Follower服务器之间<code>心跳检测的最大延时</code>，在集群运行过程中，Leader服务器会与所有的Follower进行心跳检测来确定服务器是否存活，如果超过了syncLimit时间都没有收到Follower的心跳包，就会认为该服务器已经脱离同步;</li><li>通常情况不需要修改该值，如果部署的环境网络环境质量较低{<em>网络延时较大，丢包严重</em>}，可以适当增大参数值</li></ul></li><li><p><code>snapCount</code>:</p><ul><li>该参数有默认值<code>100000</code>，可选配置，<strong>仅支持系统属性配置方式</strong><code>zookeeper.snapCount</code>;</li><li>表示<code>相邻两次数据快照之间事务的次数</code>，即事务的次数达到了<code>snapCount</code>就会进行<code>一次数据快照</code>;</li></ul></li><li><p><code>preAllocSize</code>:</p><ul><li>该参数有默认值<code>65536</code>，单位KB，即<code>64MB</code>，可选配置，<strong>仅支持系统属性配置方式</strong><code>zookeeper.preAllocSize</code>;</li><li>该参数用于配置zookeeper<code>事务日志文件预分配</code>的磁盘空间大小;</li><li>如果<code>snapCount</code>参数修改，那么<code>preAllocSize</code>参数也应该随之做出变更;例如，snapCount设置为500，同时预估每次事务的数据量大小为至多1KB，那么参数preAllocSize设置为500就足够了.</li></ul></li><li><p><code>minSessionTimeout</code>和<code>maxSeesionTimeout</code></p><ul><li>这两个参数有默认值，分别是参数 tickTime值的2倍和20倍，即默认的会话超时时间在<code>2* tickTime~20* tickTime</code>范图内，单位毫秒，可以不配置，不支持系统属性方式配置。</li><li>这两个参数用于<code>服务端对客户端会话的超时时间</code>进行限制，如果客户端设置的超时时间不在该范围内，那么会被服务端强制设置为最大或最小超时时间。</li></ul></li><li><p><code>maxClientCnxns</code>:</p><ul><li>该参数有默认值:<code>60</code>，可选配置，不支持系统属性方式配置。</li><li>从Socket层面<code>限制单个客户端与单台服务器之间的并发连接数</code>，即以IP地址粒度来进行连接数的限制。如果将该参数设置为0，则表示对连接数不作任何限制。</li><li>需要注意该连接数限制选项的使用范围，其仅仅是对单台客户端机器与单台ZooKeeper服务器之间的连接数限制，并不能控制所有客户端的连接数总和。</li><li>在3.40版本以前该参数的默认值都是10，从3.4.0版本开始变成了60，因此运维人员尤其需要注意这个变化，以防Zoo Keeper版本变化带来服务端连接数限制变化的隐患.</li></ul></li><li><p><code>jute.maxbuffer</code>:</p><ul><li>该参数有默认值:1048575，单位是字节，可以不配置，<strong>仅支持系统属性方式配置</strong>：<code>jute.maxbuffer</code>;</li><li>该参数用于配置单个数据节点[ZNode]上可以存储的最大数据量大小。通常情况下，运维人员不需要改动该参数，同时考虑到Zookeeper上不适宜存储太多的数据，往往还需要将该参数设置的更小;</li><li>需要注意的是，<code>在变更该参数的时候，需要在ZooKeeper集群的所有机器以及所有的客户端上均设置才能生效</code>。</li></ul></li><li><p><code>clientPortAddress</code>:</p><ul><li>该参数没有默认值：可以不配置，不支持系统属性方式配置；</li><li>针对那些多网卡的机器，该参数允许为每个IP地址指定不同的监听端口.</li></ul></li><li><p><code>server.id=host:port:port</code></p><ul><li>该参数没有默认值，在单机模式下可以不配置，不支持系统属性方式配置。</li><li>该参数用于配置组成ZooKeeper集群的机器列表，其中id即为Server ID，与每台服务器myid文件中的数字相对应。同时，在该数中，会配置两个端口：第一个端口用于指定 Follower服务器与Leader进行运行时通信和数据同步时所使用的端口，第二个端口则专门用于进行 Leader选举过程中的投票通信。</li><li>在ZooKeeper服务器启动的时候，其会根据myid文件中配置的Server ID来确定自己是哪台服务器，并使用对应配置的端口来进行启动。如果在实际使用过程中，需要在同一台服务器上部暑多个∠o0 Keeper实例来构成伪集群的话，那么这些端口都需要配置成不同，例如:</li></ul><pre class="line-numbers language-bash"><code class="language-bash">server.1<span class="token operator">=</span>192.168.0.1:2777:3777server.2<span class="token operator">=</span>192.168.0.1:2888:3888server.3<span class="token operator">=</span>192.168.0.1:2999:3999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>autopurge.snapRetainCount</code></p><ul><li>该参数有默认值:<code>3</code>，可以不配置，不支持系统属性方式配置。</li><li>从3.4.0版本开始，Zookeeper提供了对历史事务日志和快照数据自动清理的支持。参数<code>autopurge.snapRetainCount</code>用于配置ZooKeeper在自动清理的时候需要保留的快照数据文件数量和对应<code>autopurge.snapRetainCount</code>的事务日志文件。需要注意的是，并不是磁盘上的所有事务日志和快照数据文件都可以被清理掉————那样的话将无法恢复数据。因此<code>autopurge.snapRetainCount</code>参数的最小值是3，如果配置的<code>autopurge.snapRetainCount</code>值比3小的话，那么会被自动调整到3，即至少需要保留3个快照数据文件和对应的事务日志文件。</li></ul></li><li><p><code>autopurge.purgeInterval</code></p><ul><li>该参数有默认值:0，单位是小时，可以不配置，不支持系统属性方式配置。</li><li>参数<code>autopurge.purgeInterval</code>和参数<code>autopurge.snapRetainCount</code>配套使用，用于配置ZooKeeper进行<code>历史文件自动清理的频率</code>。如果配置该值为0或负数，那么就表明不需要开启定时清理功能。 ZooKeeper默认不开启这顼功能。</li></ul></li><li><p><code>fsync.warningthresholdms</code></p><ul><li>该参数有默认值:<code>1000</code>，单位是毫秒，可以不配置，<strong>仅支持系统属性方式配置</strong>：<code>fsync.warningthresholdms</code></li><li><code>fsync.warningthresholdms</code>用于配置ZooKeeper进行<code>事务日志fync操作时消耗时间的报警阈值</code>。一旦进行一个fync操作消耗的时间大于参数<code>fsync.warningthresholdms</code>指定的值，那么就在日志中打印出报警日志。</li></ul></li><li><p><code>forceSync</code></p><ul><li>该参数有默认值：<code>yes</code>，可以不配置，<strong>仅支持系统属性方式配置</strong>：<code>zookeeper.forceSync</code></li><li>该参数用于配置ZooKeeper服务器是否在事务提交的时候，<code>将日志写入操作强制刷入磁盘</code>[即调用java.nio.channels. FileChannel.force接口]，默认情况下是“yes”，即每次事务日志写入操作都会实时刷入磁盘。如果将其设置为“no”，则能一定程度的提高 ZooKeeper的写性能，但同时也会存在类似于机器断电这样的安全风险。</li></ul></li><li><p><code>globalOutstandingLimit</code></p><ul><li>该参数有默认值:<code>1000</code>，可以不配置，<strong>仅支持系统属性方式配置</strong>：<code>zookeeper.globalOutstandingLimit</code></li><li>参数<code>globalOutstandingLimit</code>用于配置ZooKeeper服务器<code>最大请求堆积数量</code>。在Zookeeper服务器运行的过程中，客户端会源源不断的将请求发送到服务端，为了防止服务端資源[包括CPU、参数内存和网络等]耗尽，服务端必须限制同时处理的请求数，即最大请求堆积数量</li></ul></li><li><p><code>leaderServes</code></p><ul><li>该参数有默认值：yes，可以不配置，可选配置项为“yes”和“no”，<strong>仅支持系统属性方式配置</strong>：<code>zookeeper.leaderServes</code></li><li>该参数用于配置 Leader服务器是否能够接受客户端的连接，即是否允许 Leader向客户端提供服务，默认情况下， Leader服务器能够接受并处理客户端的所有读写请求。在Zookeeper的架构设计中，Leader服务器主要用来进行对事务更新请求的协调以及集群本身的运行时协调，因此，可以设置让 Leader服务器不接受客户端的连接，以使其专注于进行分布式协调。</li></ul></li><li><p><code>SkipAcl</code></p><ul><li>该参数有默认值：no，可以不配置，可选配置项为“yes”和“no”，<strong>仅支持系统属性方式配置</strong>：`zookeeper.skipACL</li><li>该参数用于配置 ZooKeeper服务器是否跳过ACL权限检查，默认情况下是“no”，即会对每一个客户端请求进行权限检查。如果将其设置为yes”，则能一定程度的提高ZooKeeper的读写性能，但同时也将向所有客户端开放ZooKeeper的数据，包括那些之前设置过ACL权限的数据节点，也将不再接受权限控制。</li></ul></li><li><p><code>cnxTimeout</code></p><ul><li>该参数有默认值:5000，单位是毫秒，可以不配置，<strong>仅支持系统属性方式配置</strong>：<code>zookeeper.cnxTimeout</code></li><li>该参数用于配置在 Leader选举过程中，各服务器之间进行TCP连接创建的超时时间。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper环境搭建</title>
      <link href="/2020/11/15/zookeeper-huan-jing-da-jian/"/>
      <url>/2020/11/15/zookeeper-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><h3 id="下载ZooKeeper"><a href="#下载ZooKeeper" class="headerlink" title="下载ZooKeeper"></a>下载ZooKeeper</h3><ol><li>官方网站: <a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">https://zookeeper.apache.org/releases.html</a></li><li>一定要下载bin.tar.gz文件,另外一个是源码包</li></ol><pre class="line-numbers language-bash"><code class="language-bash">// 下载安装包<span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz// 解压<span class="token function">tar</span> -xzvf apache-zookeeper-3.6.2-bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ol><li>修改<code>&quot;%ZK_HOME%&quot;/conf</code>下的<code>zoo.cfg</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash">// 进入conf目录<span class="token function">cd</span> apache-zookeeper-3.6.2-bin/conf// 修改zoo_sample.cfg文件名<span class="token function">mv</span> zoo_sample.cfg zoo.cfg// 编辑文件vim zoo.cfg// 添加内容dataDir<span class="token operator">=</span>/data1/hulin/zookeeper/datadataLogDir<span class="token operator">=</span>/data1/hulin/zookeeper/logserver.1<span class="token operator">=</span>10.28.200.233:2888:3888server.2<span class="token operator">=</span>10.28.200.234:2888:3888server.3<span class="token operator">=</span>10.28.200.235:2888:3888<span class="token comment" spellcheck="true">#开启四字命令</span>4lw.commands.whitelist<span class="token operator">=</span>*// 在dataDir目录下新建一个myid文件，并写入对应的server.ID的id<span class="token function">touch</span> /data1/hulin/zookeeper/data/myid<span class="token keyword">echo</span> 1 <span class="token operator">></span> /data1/hulin/zookeeper/data/myid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="zoocfg.png" alt="配置信息"></p><ul><li><code>df -lh</code>找到一个文件夹比较大的挂载点,把<code>dataDir</code>和<code>dataLogDir</code>放在该目录里面</li><li>集群模式下,每个服务器都需要执行以上操作,注意<code>每个myid文件和server.ID中的ID一致</code></li><li>复制文件的命令:<code>scp -P 51668 apache-zookeeper-3.6.2-bin.tar.gz bbd@10.28.200.234:/home/bbd/hulin</code></li></ul><h3 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h3><ol><li><p>此时进入<code>&quot;%ZK_HOME%&quot;/bin</code>目录执行启动脚本<code>sudo sh zkServer.sh start</code>，如果出现如下报错</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token punctuation">[</span>bbd@shucang01 bin<span class="token punctuation">]</span>$ <span class="token function">sudo</span> sh zkServer.sh start Error: JAVA_HOME is not <span class="token keyword">set</span> and java could not be found <span class="token keyword">in</span> PATH.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>执行<code>export</code>命令，找到java_home</p><p> <img src="export.png" alt="JAVA_HOME"></p></li><li><p>在<code>&quot;%ZK_HOME%&quot;/conf</code>目录下找到<code>zkEnv.sh</code>，windows是zkEnv.cmd，添加如下内容<br><code>export JAVA_HOME=/usr/local/src/jdk1.8.0_112</code></p></li></ol><p><img src="env.png" alt="环境变量"></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><ul><li>在<code>&quot;%ZK_HOME%&quot;/bin</code>目录下有一个<code>zkServer.sh</code>的启动脚本, 执行命令<code>sudo sh zkServer.sh start</code>，当回显如下时，表示启动成功，如果启动失败，在<code>&quot;%ZK_HOME%&quot;/logs</code>下查看日志的打印，里面会有失败的原因，多半都是上面的配置没有写对，仔细检查一下即可</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>bbd@shucang01 bin<span class="token punctuation">]</span>$ <span class="token function">sudo</span> sh zkServer.sh startZooKeeper JMX enabled by defaultUsing config: /home/bbd/hulin/apache-zookeeper-3.6.2-bin/bin/<span class="token punctuation">..</span>/conf/zoo.cfgStarting zookeeper <span class="token punctuation">..</span>. STARTED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="验证服务"><a href="#验证服务" class="headerlink" title="验证服务"></a>验证服务</h3><ol><li><p>输入命令<code>telnet 127.0.0.1 2181</code>，然后输入<code>stat</code>:</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token punctuation">[</span>bbd@shucang01 bin<span class="token punctuation">]</span>$ telnet 127.0.0.1 2181 Trying 127.0.0.1<span class="token punctuation">..</span>. Connected to 127.0.0.1. Escape character is <span class="token string">'^]'</span><span class="token keyword">.</span> <span class="token function">stat</span> <span class="token function">stat</span> is not executed because it is not <span class="token keyword">in</span> the whitelist. Connection closed by foreign host.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果回显报错：stat is not executed because it is not in the whitelist，解决办法就是在zoo.cfg文件中增加如下命令，然后重启服务即可</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true">#开启四字命令</span> 4lw.commands.whitelist<span class="token operator">=</span>*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>当出现如下回显时，证明问题解决了</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token punctuation">[</span>bbd@shucang03 bin<span class="token punctuation">]</span>$ telnet 127.0.0.1 2181 Trying 127.0.0.1<span class="token punctuation">..</span>. Connected to 127.0.0.1. Escape character is <span class="token string">'^]'</span><span class="token keyword">.</span> <span class="token function">stat</span> Zookeeper version: 3.6.2--803c7f1a12f85978cb049af5e4ef23bd8b688715, built on 09/04/2020 12:44 GMT Clients: /127.0.0.1:16149<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">(</span>queued<span class="token operator">=</span>0,recved<span class="token operator">=</span>1,sent<span class="token operator">=</span>0<span class="token punctuation">)</span> Latency min/avg/max: 0/0.0/0 Received: 1 Sent: 0 Connections: 1 Outstanding: 0 Zxid: 0x200000000 Mode: follower Node count: 5 Connection closed by foreign host. <span class="token punctuation">[</span>bbd@shucang03 bin<span class="token punctuation">]</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10安装anaconda环境</title>
      <link href="/2020/11/14/win10-an-zhuang-anaconda-huan-jing/"/>
      <url>/2020/11/14/win10-an-zhuang-anaconda-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="下载Anaconda"><a href="#下载Anaconda" class="headerlink" title="下载Anaconda"></a>下载Anaconda</h2><ol><li><p>下载地址: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a>, 选择windows64位安装包,如下图所示<br> <img src="install.png" alt="安装包"></p></li><li><p>安装到非C盘的路径,比较占用空间</p></li><li><p>添加系统环境变量</p><pre class="line-numbers language-shell"><code class="language-shell"> E:\anaconda3 E:\anaconda3\Scripts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="查看和更新包"><a href="#查看和更新包" class="headerlink" title="查看和更新包"></a>查看和更新包</h2><ol><li><p>进入<code>E:\anaconda3\Scripts</code>目录,里面包含了pip.exe程序,在该目录执行cmd,然后<code>pip list</code>可以看到anaconda安装的所有包</p></li><li><p>更换pip源</p><pre class="line-numbers language-bash"><code class="language-bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --set show_channel_urls <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>临时更换源</p><pre class="line-numbers language-bash"><code class="language-bash"> pip <span class="token function">install</span> ssl -i http://pypi.douban.com/simple --trusted-host pypi.douban.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li><p>anaconda 的pip 和系统的python3 的pip冲突</p><pre class="line-numbers language-bash"><code class="language-bash"> 1.添加环境变量 E:\anaconda3 E:\anaconda3\Scripts E:\anaconda3\Library\bin 2.修改Script下的pip.exe为pip3.8.exe 3.执行pip3.8 list即可查看对应的安装包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更换pip镜像</p><p> 默认的pip镜像下载太慢,修改为其他源</p><pre class="line-numbers language-bash"><code class="language-bash"> 1. 修改为清华源 通过everthing找到pip.ini文件,修改为如下值: <span class="token punctuation">[</span>global<span class="token punctuation">]</span> index-url <span class="token operator">=</span> https://pypi.tuna.tsinghua.edu.cn/simple 2. 更换后还是报错https无法访问 打开网址：https://slproweb.com/products/Win32OpenSSL.html 找到Win64 OpenSSL v1.1.1h Ligh,只有3M左右,下载安装即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其他问题</p><pre class="line-numbers language-shell"><code class="language-shell"> 1.升级setuptools E:\anaconda3>python -m pip install --upgrade setuptools -i http://pypi.douban.com/simple --trusted-host pypi.douban.com Looking in indexes: http://pypi.douban.com/simple 2.升级pip python -m pip install --upgrade pip 3.以user mode 升级 pip install --user --upgrade pillow -i http://pypi.douban.com/simple --trusted-host pypi.douban.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-数据可视化-matplotlib</title>
      <link href="/2020/11/14/python-shu-ju-ke-shi-hua-matplotlib/"/>
      <url>/2020/11/14/python-shu-ju-ke-shi-hua-matplotlib/</url>
      
        <content type="html"><![CDATA[<h2 id="绘制简单的图表"><a href="#绘制简单的图表" class="headerlink" title="绘制简单的图表"></a>绘制简单的图表</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>`` pip install –user matplotlib`</p><h3 id="绘制一个折线图"><a href="#绘制一个折线图" class="headerlink" title="绘制一个折线图"></a>绘制一个折线图</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">//</span> 存放需要绘制的点    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">//</span> fig表示整张图片<span class="token punctuation">,</span> ax表示图片中的图表    ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>squares<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-os库学习</title>
      <link href="/2020/11/14/python-os-ku-xue-xi/"/>
      <url>/2020/11/14/python-os-ku-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ol><li><code>pwd = os.getcwd()</code>: 获取当前运行程序的目录</li><li><code>os.chdir(path)</code>: 切换目录</li><li><code>dirs = os.mkdir(path, mode)</code>: 新建一个文件,mode默认=0777</li><li><code>os.removedir(path)</code>: 递归删除文件夹及子文件</li><li><code>os.remove(path)</code>: 删除文件,如果是文件夹会报错</li><li><code>file_list = os.listdir(path)</code>: 查看文件夹下的文件及文件夹名称</li><li><code>file = os.open(path, &quot;w&quot;, encoding)</code>: 创建文件;  <code>file.close()</code>: 关闭文件</li></ol><h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>获取当前文件路径<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>e<span class="token punctuation">:</span>\Code\python<span class="token operator">-</span>study\<span class="token number">003</span><span class="token operator">-</span>os<span class="token operator">-</span>study<span class="token punctuation">.</span>py<span class="token number">2</span><span class="token punctuation">.</span>获取当前文件的文件夹路径<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>e<span class="token punctuation">:</span>\Code\python<span class="token operator">-</span>study<span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'***获取当前目录***'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token operator">*</span>获取当前目录<span class="token operator">**</span><span class="token operator">*</span>E<span class="token punctuation">:</span>\Code\python<span class="token operator">-</span>studye<span class="token punctuation">:</span>\Code\python<span class="token operator">-</span>study<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'***获取上级目录***'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token operator">*</span>获取上级目录<span class="token operator">**</span><span class="token operator">*</span>e<span class="token punctuation">:</span>\CodeE<span class="token punctuation">:</span>\CodeE<span class="token punctuation">:</span>\Code<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'***获取上上级目录***'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"../.."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token operator">*</span>获取上上级目录<span class="token operator">**</span><span class="token operator">*</span>E<span class="token punctuation">:</span>\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h2><h3 id="基本读写"><a href="#基本读写" class="headerlink" title="基本读写"></a>基本读写</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>读文件<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file_name.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>覆盖写文件<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file_name.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"abc\n"</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>追加写<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file_name.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"abc\n"</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取文件的异常处理"><a href="#读取文件的异常处理" class="headerlink" title="读取文件的异常处理"></a>读取文件的异常处理</h3><p>读取文件的时候,可能会出现文件找不到的问题</p><ol><li><p>判断文件是否存在<br>判断文件用<code>os.path.isfile(path)</code>,判断文件夹用<code>os.path.exists(path)</code>,存在返回true,不存在返回false</p><pre class="line-numbers language-python"><code class="language-python"> file_path <span class="token operator">=</span> <span class="token string">"E:\\Code\\python-study\\001_basic_data_type1.py"</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>         <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"file {file_path} not found."</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> file E<span class="token punctuation">:</span>\Code\python<span class="token operator">-</span>study\001_basic_data_type1<span class="token punctuation">.</span>py <span class="token operator">not</span> found<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用try except</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>     file_path <span class="token operator">=</span> <span class="token string">"E:\\Code\\python-study\\001_basic_data_type1.py"</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>         <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>             <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>     <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such file <span class="token operator">or</span> directory<span class="token punctuation">:</span> <span class="token string">'E:\\Code\\python-study\\001_basic_data_type1.py'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-类</title>
      <link href="/2020/11/14/python-lei/"/>
      <url>/2020/11/14/python-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a><strong>init</strong></h3><p>python类初始化默认会调用<code>__init__</code>方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><ol><li>默认情况下,<code>__init__</code>中的属性是可以被修改的</li><li>python中让属性变成<code>private</code>的方法是在属性前加两个下划线</li><li>使用装饰器给类提供set和get的方法</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>__year <span class="token operator">=</span> year    @property    <span class="token keyword">def</span> <span class="token function">model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__model    @model<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">model</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__model <span class="token operator">=</span> model    @property    <span class="token keyword">def</span> <span class="token function">year</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__year    @year<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">year</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__year <span class="token operator">=</span> year<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">"audi"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"the car model is {car.model}, year is {car.year}"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"the car model is {car.__model}, year is {car.__year}"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">//</span> 成功获取属性the car model <span class="token keyword">is</span> audi<span class="token punctuation">,</span> year <span class="token keyword">is</span> <span class="token number">3</span><span class="token operator">//</span> 不能访问私有方法Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"e:\Code\python-study\001_basic_data_type.py"</span><span class="token punctuation">,</span> line <span class="token number">35</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"the car model is {car.__model}, year is {car.__year}"</span><span class="token punctuation">)</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Car'</span> object has no attribute <span class="token string">'__model'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">"audi"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    car<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token string">"yadi"</span> <span class="token operator">//</span> 实际调用的是set方法    car<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">//</span> 获取的是property    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"the car model is {car.model}, year is {car.year}"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>the car model <span class="token keyword">is</span> yadi<span class="token punctuation">,</span> year <span class="token keyword">is</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><ol><li>私有的<code>privite</code>: 使用两个下划线表示 <code>self.__year</code><br>该属性不能被子类和实例对象方法</li><li>受保护的<code>protected</code>: 使用一个下划线表示 <code>self._year</code><br>该属性可以被子类访问,但不能被实例所访问</li><li>公共的<code>public</code>: 没有下换线开头的 <code>self.year</code><br>该属性可以被子类及实例对象访问</li></ol><h3 id="继承父类的构造方法"><a href="#继承父类的构造方法" class="headerlink" title="继承父类的构造方法"></a>继承父类的构造方法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">:</span> str<span class="token punctuation">,</span> model<span class="token punctuation">:</span> str<span class="token punctuation">,</span> year<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>__model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>__year <span class="token operator">=</span> year    @property    <span class="token keyword">def</span> <span class="token function">make</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__make    @property    <span class="token keyword">def</span> <span class="token function">model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__model    @property    <span class="token keyword">def</span> <span class="token function">year</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__year<span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">:</span> str<span class="token punctuation">,</span> model<span class="token punctuation">:</span> str<span class="token punctuation">,</span> year<span class="token punctuation">:</span> str<span class="token punctuation">,</span> battery_size<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> battery_size<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    electricCar <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">"tesla"</span><span class="token punctuation">,</span> <span class="token string">"model s"</span><span class="token punctuation">,</span> <span class="token string">"2020"</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"the electric car desined by {electricCar.make}, model is {electricCar.model}, created by {electricCar.year}, battery_size is {electricCar.battery_size}"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>the electric car desined by tesla<span class="token punctuation">,</span> model <span class="token keyword">is</span> model s<span class="token punctuation">,</span> created by <span class="token number">2020</span><span class="token punctuation">,</span> battery_size <span class="token keyword">is</span> <span class="token number">75</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重写父类的方法"><a href="#重写父类的方法" class="headerlink" title="重写父类的方法"></a>重写父类的方法</h3><p>给父类添加一个<code>to_string</code>的方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">//</span> 单个下划线表示属性是protected的    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>_model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>_year <span class="token operator">=</span> year    <span class="token keyword">def</span> <span class="token function">to_string</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{self._make}, {self._model}, {self._year}"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> electricCar<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span>tesla<span class="token punctuation">,</span> model s<span class="token punctuation">,</span> <span class="token number">2020</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给子类添加一个同样的方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">:</span> str<span class="token punctuation">,</span> model<span class="token punctuation">:</span> str<span class="token punctuation">,</span> year<span class="token punctuation">:</span> str<span class="token punctuation">,</span> battery_size<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> battery_size    <span class="token keyword">def</span> <span class="token function">to_string</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{self._make}, {self._model}, {self._year}, {self.battery_size}"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    electricCar <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">"tesla"</span><span class="token punctuation">,</span> <span class="token string">"model s"</span><span class="token punctuation">,</span> <span class="token string">"2020"</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span>    electricCar<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>tesla<span class="token punctuation">,</span> model s<span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">75</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python函数</title>
      <link href="/2020/11/14/python-han-shu/"/>
      <url>/2020/11/14/python-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><ol><li>形参: 定义函数时的占位符,没有实际的值</li><li>实参: 调用函数时传入的参数,是实际的值</li><li>参数的顺序,从左往右,必选参数,默认参数,可变参数,关键字参数</li></ol><h3 id="必选参数"><a href="#必选参数" class="headerlink" title="必选参数"></a>必选参数</h3><p>参数只有一个形参,没有默认值式,调用的时候必需全部指定,不然会报错</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"I have a {animal_type}"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"My {animal_type}'s name is {pet_name.title()}"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> describe_pet<span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"wangwang"</span><span class="token punctuation">)</span>I have a dogMy dog's name <span class="token keyword">is</span> Wangwang<span class="token operator">>></span><span class="token operator">></span> describe_pet<span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"e:\Code\python-study\001_basic_data_type.py"</span><span class="token punctuation">,</span> line <span class="token number">17</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    describe_pet<span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> describe_pet<span class="token punctuation">(</span><span class="token punctuation">)</span> missing <span class="token number">1</span> required positional argument<span class="token punctuation">:</span> <span class="token string">'pet_name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认参数–可选参数"><a href="#默认参数–可选参数" class="headerlink" title="默认参数–可选参数"></a>默认参数–<em>可选参数</em></h3><p>可以看到当调用参数时,如果没有传入age的值,也能成功输出age</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"I have a {animal_type}"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"My {animal_type}'s name is {pet_name.title()}, age is {age}"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> describe_pet<span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"wangwang"</span><span class="token punctuation">)</span>I have a dogMy dog's name <span class="token keyword">is</span> Wangwang<span class="token punctuation">,</span> age <span class="token keyword">is</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数也是一种可选参数,区别是可变参数可以不指定具体的形参,把所有的实参封装成一个tuple,可以根据tuple的索引获得传入的参数, 需要注意参数的顺序及越界问题,一般很少用这种方式</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"I have a {args[0]}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"My {args[0]}'s name is {args[1].title()}, age is {args[2]}"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"please input at least three agruments"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> describe_pet<span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"wangwang"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>I have a dogMy dog's name <span class="token keyword">is</span> Wangwang<span class="token punctuation">,</span> age <span class="token keyword">is</span> <span class="token number">30</span><span class="token operator">>></span><span class="token operator">></span> describe_pet<span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"wangwang"</span><span class="token punctuation">)</span>please input at least three agruments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>关键字参数也是一种可选参数,只是入参形式必须使用dict类型,需要注意传入的key值如果和函数中定义的key不一致,不会报错,但是对应的代码不会生效,<code>实际开发中很容易出现问题</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span><span class="token operator">**</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal_name <span class="token operator">=</span> args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"animal_name"</span><span class="token punctuation">)</span>    pet_name <span class="token operator">=</span> args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pet_name"</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"I have a {animal_name}"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"My {animal_name}'s name is {pet_name.title()}, age is {age}"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> describe_pet<span class="token punctuation">(</span>animal_name<span class="token operator">=</span><span class="token string">"dog"</span><span class="token punctuation">,</span> pet_name<span class="token operator">=</span><span class="token string">"wangwang"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>I have a dogMy dog's name <span class="token keyword">is</span> Wangwang<span class="token punctuation">,</span> age <span class="token keyword">is</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python集合之字典</title>
      <link href="/2020/11/14/python-ji-he-zhi-zi-dian/"/>
      <url>/2020/11/14/python-ji-he-zhi-zi-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h2><ol><li><p>使用花括号{}表示创建一个空字典</p></li><li><p>也可以直接在创建字典是赋一个默认值</p><pre class="line-numbers language-python"><code class="language-python"> alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="字典的访问和修改"><a href="#字典的访问和修改" class="headerlink" title="字典的访问和修改"></a>字典的访问和修改</h2><ol><li><p>访问的方式有两种, alien[“color”], alien.get(“color”)</p></li><li><p>推荐使用get方法,当可以不存在时,直接访问键值会产生异常,get方法可以返回默认值</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token operator">>></span><span class="token operator">></span> alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">}</span> <span class="token operator">>></span><span class="token operator">></span> alien<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span>  <span class="token operator">//</span> 产生异常 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span> File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span> KeyError<span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token operator">>></span><span class="token operator">></span> alien<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">//</span> 默认返回None <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> None <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"this"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">//</span> get的第二个参数可以给返回值赋一个默认值 this<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h2><pre class="line-numbers language-python"><code class="language-python">遍历键值user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"efermi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">:</span> <span class="token string">"man"</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> user<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>nameagesex遍历排序过后的键值user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"efermi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">:</span> <span class="token string">"man"</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>user<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>agenamesex遍历valueuser <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"efermi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">:</span> <span class="token string">"man"</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> user<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>efermi<span class="token number">16</span>man遍历key和valueuser <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"efermi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">:</span> <span class="token string">"man"</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> user<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>name efermiage <span class="token number">16</span>sex man<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python集合之列表</title>
      <link href="/2020/11/13/python-ji-he-zhi-lie-biao/"/>
      <url>/2020/11/13/python-ji-he-zhi-lie-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="列表的声明"><a href="#列表的声明" class="headerlink" title="列表的声明"></a>列表的声明</h2><pre class="line-numbers language-python"><code class="language-python">bicyles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"trek"</span><span class="token punctuation">,</span> <span class="token string">"cannondale"</span><span class="token punctuation">,</span> <span class="token string">"redline"</span><span class="token punctuation">,</span> <span class="token string">"specilized"</span><span class="token punctuation">]</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="列表的访问"><a href="#列表的访问" class="headerlink" title="列表的访问"></a>列表的访问</h2><p>列表的访问通过下标的形式,从零开始,越界会出现异常</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bicyles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"trek"</span><span class="token punctuation">,</span> <span class="token string">"cannondale"</span><span class="token punctuation">,</span> <span class="token string">"redline"</span><span class="token punctuation">,</span> <span class="token string">"specilized"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'trek'</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>IndexError<span class="token punctuation">:</span> list index out of range<span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'specilized'</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的添加、修改、和删除"><a href="#列表的添加、修改、和删除" class="headerlink" title="列表的添加、修改、和删除"></a>列表的添加、修改、和删除</h2><ol><li><p>添加方法:append(末尾添加),insert(指定位置插入)</p></li><li><p>修改:针对索引操作</p></li><li><p>删除: del(没有索引时,删除整个列表), pop(没有索引时,弹出最后一个元素),remove是删除具体的值</p><pre class="line-numbers language-python"><code class="language-python">修改<span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"taxi"</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">]</span>添加<span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"honda"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'honda'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"yamaha"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'yamaha'</span><span class="token punctuation">,</span> <span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'honda'</span><span class="token punctuation">]</span>删除<span class="token keyword">del</span> 有下标删除一个元素<span class="token punctuation">,</span>没有下标删除整个列表<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> bicyles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'honda'</span><span class="token punctuation">]</span>pop 有下标删除对应的值<span class="token punctuation">,</span>没有下标删除最后一个<span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'honda'</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token string">'specilized'</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">]</span>remove 删除具体的值<span class="token punctuation">,</span>如果有多个相同的值<span class="token punctuation">,</span>只会删除第一个<span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"trek"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'honda'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="del和pop的区别"><a href="#del和pop的区别" class="headerlink" title="del和pop的区别"></a>del和pop的区别</h3><p>del没有返回值,pop有返回值,可以赋值给其他变量使用</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bicyles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'yamaha'</span><span class="token punctuation">,</span> <span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'honda'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> temp <span class="token operator">=</span> <span class="token keyword">del</span> bicyles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>    temp <span class="token operator">=</span> <span class="token keyword">del</span> bicyles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>             <span class="token operator">^</span>SyntaxError<span class="token punctuation">:</span> invalid syntax<span class="token operator">>></span><span class="token operator">></span> temp <span class="token operator">=</span> bicyles<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> temp<span class="token string">'yamaha'</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'honda'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的排序"><a href="#列表的排序" class="headerlink" title="列表的排序"></a>列表的排序</h2><ol><li>sort()会默认按照字母顺序排序</li><li>sorted()不会修改原来的列表,只是给一个临时的排好序的列表</li><li>reverse(),反转列表</li><li>len表示列表的长度</li><li>list[-1]返回最后一个元素,当列表为空时会有异常</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bicyles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'honda'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span>bicyles<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'trek'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'honda'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'trek'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'trek'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bicyles<span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'taxi'</span><span class="token punctuation">,</span> <span class="token string">'specilized'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'honda'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>bicyles<span class="token punctuation">)</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>使用for循环进行列表的遍历</p><pre class="line-numbers language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Alan"</span><span class="token punctuation">,</span> <span class="token string">"Jim"</span><span class="token punctuation">]</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>BobAlanJim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数值型列表"><a href="#数值型列表" class="headerlink" title="数值型列表"></a>数值型列表</h3><p>使用range()函数可以轻松的创建一个数值型列表</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">1</span><span class="token number">3</span><span class="token number">5</span><span class="token number">7</span><span class="token number">9</span><span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表解析式"><a href="#列表解析式" class="headerlink" title="列表解析式"></a>列表解析式</h3><pre class="line-numbers language-python"><code class="language-python">sequence <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表的切片"><a href="#列表的切片" class="headerlink" title="列表的切片"></a>列表的切片</h3><ol><li>左闭右开</li><li>冒号的一边没有值,默认到边界</li><li>冒号的两边没有值,直接复制整个列表</li><li>列表的反向下标从-1开始</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">//</span> 复制列表<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> 注意左闭右开<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据类型</title>
      <link href="/2020/11/13/python-ji-ben-shu-ju-lei-xing/"/>
      <url>/2020/11/13/python-ji-ben-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串的声明"><a href="#字符串的声明" class="headerlink" title="字符串的声明"></a>字符串的声明</h3><pre class="line-numbers language-python"><code class="language-python">strings <span class="token operator">=</span> <span class="token string">"This is a string"</span> <span class="token operator">//</span> 双引号strings <span class="token operator">=</span> <span class="token string">'This is a string'</span> <span class="token operator">//</span> 单引号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="字符串的大小写"><a href="#字符串的大小写" class="headerlink" title="字符串的大小写"></a>字符串的大小写</h3><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"Slim Shady"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="字符串中使用变量"><a href="#字符串中使用变量" class="headerlink" title="字符串中使用变量"></a>字符串中使用变量</h3><ul><li><p>在字符串前面加上字母f,然后把变量放在花括号内,即可进行变量的替换</p></li><li><p>f是format的缩写</p><pre class="line-numbers language-python"><code class="language-python">  name <span class="token operator">=</span> <span class="token string">"Slim Shady"</span>  sex <span class="token operator">=</span> <span class="token string">"男"</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"name:{name}, sex:{sex}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>注意f的写法必须高于python3.6,python3.5及之前的写法是</p><pre class="line-numbers language-python"><code class="language-python">  full_name <span class="token operator">=</span> <span class="token string">"{} {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> language <span class="token operator">=</span> <span class="token string">" python "</span><span class="token operator">>></span><span class="token operator">></span> language<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">' python'</span><span class="token operator">>></span><span class="token operator">></span> language<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'python '</span><span class="token operator">>></span><span class="token operator">></span> language<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'python'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="数字的基本运算"><a href="#数字的基本运算" class="headerlink" title="数字的基本运算"></a>数字的基本运算</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token number">0.6666666666666666</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">2</span><span class="token number">1.0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token number">0.30000000000000004</span><span class="token operator">>></span><span class="token operator">></span> 100_000_000<span class="token number">100000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>我们可以发现python中除法的结果都是浮点数,即使参与运算的都是整型</li><li>浮点型小数的运算结果是不准确的,0.1 + 0.2 != 0.3</li><li>数字可以用下划线来表示,更清晰易读（注意python版本&gt;=3.6）</li></ol><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><pre class="line-numbers language-python"><code class="language-python">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span>MAX_NUM <span class="token operator">=</span> <span class="token number">100000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>可以同时给多个变量进行赋值</li><li>常量一般用全大写字母来表示</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode常见问题</title>
      <link href="/2020/11/13/vscode-chang-jian-wen-ti/"/>
      <url>/2020/11/13/vscode-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode配置文件头"><a href="#vscode配置文件头" class="headerlink" title="vscode配置文件头"></a>vscode配置文件头</h1>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置</title>
      <link href="/2020/11/13/vscode-pei-zhi/"/>
      <url>/2020/11/13/vscode-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h2><pre class="line-numbers language-json"><code class="language-json">    <span class="token punctuation">{</span>    <span class="token property">"editor.suggestSelection"</span><span class="token operator">:</span> <span class="token string">"first"</span><span class="token punctuation">,</span>    <span class="token property">"vsintellicode.modify.editor.suggestSelection"</span><span class="token operator">:</span> <span class="token string">"automaticallyOverrodeDefaultValue"</span><span class="token punctuation">,</span>    // <span class="token property">"python.autoComplete.extraPaths"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"C:\\Python36\\Lib\\site-packages"</span><span class="token punctuation">,</span><span class="token string">"C:\\Python36\\Scripts"</span><span class="token punctuation">,</span> <span class="token string">"C:\\Python27\\Lib\\site-packages"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"python.autoComplete.extraPaths"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"C:\\Users\\BBD\\anaconda3\\Lib\\site-packages"</span><span class="token punctuation">,</span>        <span class="token string">"C:\\Users\\BBD\\anaconda3\\Scripts"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"python.autoComplete.addBrackets"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"python.pythonPath"</span><span class="token operator">:</span> <span class="token string">"C:\\Users\\BBD\\anaconda3\\python"</span><span class="token punctuation">,</span>    <span class="token property">"[python]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"ms-python.python"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"python.languageServer"</span><span class="token operator">:</span> <span class="token string">"Pylance"</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.runInTerminal"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.cwd"</span><span class="token operator">:</span> <span class="token string">"$pythonPath $fullFileName"</span><span class="token punctuation">,</span>    // <span class="token property">"code-runner.fileDirectoryAsCwd"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> //使用要执行的文件目录    <span class="token property">"code-runner.executorMap"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        // <span class="token property">"python"</span><span class="token operator">:</span> <span class="token string">"python3 -u"</span><span class="token punctuation">,</span>        <span class="token property">"python"</span><span class="token operator">:</span> <span class="token string">"$pythonPath $fullFileName"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.executorMapByGlob"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        // 预发布        // <span class="token property">"*.txt"</span><span class="token operator">:</span> <span class="token string">"-v URL:http://dataapiv2.gray.bbdops.com -v dbHost:mysql.read.bbdops.com -v dbPort:53606 -v dbUserName:dp_app_reader -v dbPassword:bEisnDlBMrUWdnvp -v newDbHost:10.28.121.11 -v newDbPort:60114 -v newDbUserName:bbd_dp_read -v newDbPassword:v9PkZlUZ6CvRL1iYj6gs -d results $fullFileName"</span><span class="token punctuation">,</span>        // 正式        <span class="token property">"*.txt"</span><span class="token operator">:</span> <span class="token string">"robot -v URL:http://dataapi.bbdservice.com -v dbHost:mysql.read.bbdops.com -v dbPort:53606 -v dbUserName:dp_app_reader -v dbPassword:bEisnDlBMrUWdnvp -v newDbHost:10.28.121.11 -v newDbPort:60114 -v newDbUserName:bbd_dp_read -v newDbPassword:v9PkZlUZ6CvRL1iYj6gs -d results $fullFileName"</span><span class="token punctuation">,</span>        // 测试        // <span class="token property">"*.txt"</span><span class="token operator">:</span> <span class="token string">"-v URL:http://10.28.200.214:18080 -v dbHost:10.28.100.51 -v dbPort:3306 -v dbUserName:root -v dbPassword:Dataom123!@## -v newDbHost:10.28.100.51 -v newDbPort:3306 -v newDbUserName:root -v newDbPassword:Dataom123!@## -d results  $fullFileName"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"python.linting.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"python.linting.pylintEnabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"python.linting.pycodestyleEnabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"python.linting.pycodestyleArgs"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"--max-line-length=79"</span><span class="token punctuation">,</span>        <span class="token string">"--ignore=E501"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"python.linting.flake8Enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"python.linting.flake8Args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"--max-line-length=79"</span><span class="token punctuation">,</span>        <span class="token string">"--ignore=E501"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"python.formatting.provider"</span><span class="token operator">:</span> <span class="token string">"yapf"</span><span class="token punctuation">,</span>    <span class="token property">"files.autoSave"</span><span class="token operator">:</span> <span class="token string">"onWindowChange"</span><span class="token punctuation">,</span>    // <span class="token property">"files.autoSaveDelay"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Consolas, 'Courier New', Dengxian"</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontLigatures"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"editor.tokenColorCustomizations"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"textMateRules"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Comment"</span><span class="token punctuation">,</span>            <span class="token property">"scope"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"comment"</span><span class="token punctuation">,</span>            <span class="token string">"comment.block"</span><span class="token punctuation">,</span>            <span class="token string">"comment.block.documentation"</span><span class="token punctuation">,</span>            <span class="token string">"comment.line"</span><span class="token punctuation">,</span>            <span class="token string">"comment.line.double-slash"</span><span class="token punctuation">,</span>            <span class="token string">"punctuation.definition.comment"</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"fontStyle"</span><span class="token operator">:</span> <span class="token string">"italic"</span><span class="token punctuation">,</span>            //斜体 <span class="token property">"fontStyle"</span><span class="token operator">:</span> <span class="token string">"italic"</span><span class="token punctuation">,</span>            //斜体下划线 <span class="token property">"fontStyle"</span><span class="token operator">:</span> <span class="token string">"italic underline"</span><span class="token punctuation">,</span>            //斜体粗体下划线 <span class="token property">"fontStyle"</span><span class="token operator">:</span> <span class="token string">"italic bold underline"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"search.exclude"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"**/.history"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"files.associations"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"*.txt"</span><span class="token operator">:</span> <span class="token string">"robot"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"rfLanguageServer.includePaths"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"**/*.robot"</span><span class="token punctuation">,</span>        <span class="token string">"**/*.py"</span><span class="token punctuation">,</span>        <span class="token string">"**/*.txt"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"rfLanguageServer.libraries"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"BuiltIn-3.0.4"</span><span class="token punctuation">,</span>        <span class="token string">"DateTime-3.0.4"</span><span class="token punctuation">,</span>        <span class="token string">"Collections-3.0.4"</span><span class="token punctuation">,</span>        <span class="token string">"OperatingSystem-3.0.4"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"rfLanguageServer.pythonKeywords"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"python.autoUpdateLanguageServer"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"vsintellicode.features.python.deepLearning"</span><span class="token operator">:</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span>    <span class="token property">"files.trimTrailingWhitespace"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"java.semanticHighlighting.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"files.exclude"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"**/.classpath"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.project"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.settings"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.factorypath"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"sync.gist"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"maven.executable.path"</span><span class="token operator">:</span> <span class="token string">"E:\\apache-maven-3.5.0\\bin\\mvn.cmd"</span><span class="token punctuation">,</span>    <span class="token property">"maven.terminal.useJavaHome"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"maven.terminal.customEnv"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>        <span class="token property">"environmentVariable"</span><span class="token operator">:</span> <span class="token string">"JAVA_HOME"</span><span class="token punctuation">,</span>        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"C:\\Program Files\\Java\\jdk1.8.0_231"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"java.home"</span><span class="token operator">:</span> <span class="token string">"C:\\Program Files\\Java\\jdk-11.0.8"</span><span class="token punctuation">,</span>    <span class="token property">"java.configuration.runtimes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"JavaSE-1.8"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"C:\\Program Files\\Java\\jdk1.8.0_231"</span><span class="token punctuation">,</span>        <span class="token property">"default"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"JavaSE-11"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"C:\\Program Files\\Java\\jdk-11.0.8"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"java.test.config"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"myConfiguration"</span><span class="token punctuation">,</span>        <span class="token property">"workingDirectory"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"java.saveActions.organizeImports"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"java.debug.settings.console"</span><span class="token operator">:</span> <span class="token string">"internalConsole"</span><span class="token punctuation">,</span>    <span class="token property">"quarkus.tools.alwaysShowWelcomePage"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"python.analysis.extraPaths"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"C:\\Users\\BBD\\anaconda3\\Lib\\site-packages"</span><span class="token punctuation">,</span>        <span class="token string">"C:\\Users\\BBD\\anaconda3\\Scripts"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"python.analysis.completeFunctionParens"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"kite.showWelcomeNotificationOnStartup"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="python文件头"><a href="#python文件头" class="headerlink" title="python文件头"></a>python文件头</h2><ol><li><p>依次点击”File” -&gt; “Preference” -&gt; “User Snippets”</p></li><li><p>在输入框输入”python”,会自动生成一个python.json文件</p></li><li><p>把如下配置拷贝到python.json文件中</p></li><li><p>在写python的时候,输入prefix中的值”header”,即可快速添加头部信息</p><p> <img src="settings.gif" alt="设置"></p><pre class="line-numbers language-json"><code class="language-json">     <span class="token punctuation">{</span>         <span class="token property">"HEADER"</span><span class="token operator">:</span> <span class="token punctuation">{</span>             <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"header"</span><span class="token punctuation">,</span>             <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                 <span class="token string">"#!/usr/bin/env python"</span><span class="token punctuation">,</span>                 <span class="token string">"## -*- encoding: utf-8 -*-"</span><span class="token punctuation">,</span>                 <span class="token string">"'''"</span><span class="token punctuation">,</span>                 <span class="token string">"@Author: Hulin"</span><span class="token punctuation">,</span>                 <span class="token string">"@Date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}"</span><span class="token punctuation">,</span>                 <span class="token string">"@Description: $0"</span><span class="token punctuation">,</span>                 <span class="token string">"'''"</span><span class="token punctuation">,</span>             <span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2020/10/20/pai-xu-suan-fa/"/>
      <url>/2020/10/20/pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li><li>重复步骤3直到某一指针达到序列尾</li><li>将另一序列剩下的所有元素直接复制到合并序列尾</li></ol><p><img src="mergeSort1.png" alt="排序过程"></p><p><img src="mergeSort.gif" alt="动态演示"></p><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>high <span class="token operator">-</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左指针</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 右指针</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把较小的数先移到新数组中</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 把左边剩余的数移入数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 把右边边剩余的数移入数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 把新数组中的数覆盖nums数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k2 <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>k2 <span class="token operator">+</span> low<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>k2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 左边</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 右边</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 左右归并</span>            <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序结果："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>持续集成和容器管理</title>
      <link href="/2020/09/02/chi-xu-ji-cheng-he-rong-qi-guan-li/"/>
      <url>/2020/09/02/chi-xu-ji-cheng-he-rong-qi-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-Maven插件安装"><a href="#Docker-Maven插件安装" class="headerlink" title="Docker Maven插件安装"></a>Docker Maven插件安装</h2><ol><li><p>修改宿主机的docker配置，让其可以远程访问</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">vi</span> /lib/systemd/system/docker.service 在ExecStart<span class="token operator">=</span>后添加配置 -H tcp:0.0.0.2375 -H unix:///var/run/docker.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>刷新配置</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> systemctl deamon-reload <span class="token function">sudo</span> systemctl restart docker docker statrt <span class="token punctuation">[</span>registry_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在pom.xml中增加配置</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>build<span class="token operator">></span>     <span class="token operator">&lt;</span>plugins<span class="token operator">></span>         <span class="token operator">&lt;</span>plugin<span class="token operator">></span>             <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com.spotify<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>             <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>docker-maven-plugin<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>             <span class="token operator">&lt;</span>version<span class="token operator">></span>1.0.0<span class="token operator">&lt;</span>/version<span class="token operator">></span>             <span class="token operator">&lt;</span>configuration<span class="token operator">></span>                 <span class="token operator">&lt;</span>imageName<span class="token operator">></span>192.168.100.10:5000/<span class="token variable">${project.artifactId}</span><span class="token keyword">:</span><span class="token variable">${project.version}</span><span class="token operator">&lt;</span>/imageName<span class="token operator">></span>                 <span class="token operator">&lt;</span>baseImage<span class="token operator">></span>jdk1.8<span class="token operator">&lt;</span>/baseImage<span class="token operator">></span>                 <span class="token operator">&lt;</span>maintainer<span class="token operator">></span>docker_maven docker_maven@email.com<span class="token operator">&lt;</span>/maintainer<span class="token operator">></span>                 <span class="token operator">&lt;</span>workdir<span class="token operator">></span>/ROOT<span class="token operator">&lt;</span>/workdir<span class="token operator">></span>                 <span class="token operator">&lt;</span>cmd<span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"java"</span>, <span class="token string">"-version"</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>/cmd<span class="token operator">></span>                 <span class="token operator">&lt;</span>entryPoint<span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"java"</span>, <span class="token string">"-jar"</span>, <span class="token string">"<span class="token variable">${project.build.finalName}</span>.jar"</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>/entryPoint<span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">!</span>-- 这里是复制 jar 包到 docker 容器指定目录配置 --<span class="token operator">></span>                 <span class="token operator">&lt;</span>resources<span class="token operator">></span>                     <span class="token operator">&lt;</span>resource<span class="token operator">></span>                         <span class="token operator">&lt;</span>targetPath<span class="token operator">></span>/ROOT<span class="token operator">&lt;</span>/targetPath<span class="token operator">></span>                         <span class="token operator">&lt;</span>directory<span class="token operator">></span><span class="token variable">${project.build.directory}</span><span class="token operator">&lt;</span>/directory<span class="token operator">></span>                         <span class="token operator">&lt;</span>include<span class="token operator">></span><span class="token variable">${project.build.finalName}</span>.jar<span class="token operator">&lt;</span>/include<span class="token operator">></span>                     <span class="token operator">&lt;</span>/resource<span class="token operator">></span>                 <span class="token operator">&lt;</span>/resources<span class="token operator">></span>                 <span class="token operator">&lt;</span>dockerHost<span class="token operator">></span>http://192.168.100.10:2375<span class="token operator">&lt;</span>/dockerhost<span class="token operator">></span>             <span class="token operator">&lt;</span>/configuration<span class="token operator">></span>         <span class="token operator">&lt;</span>/plugin<span class="token operator">></span>     <span class="token operator">&lt;</span>/plugins<span class="token operator">></span> <span class="token operator">&lt;</span>/build<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打包上传</p><ul><li><p>在项目根目录执行<code>mvn install</code></p></li><li><p>然后执行<code>mvn docker:build -DpushImage</code></p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile基本操作</title>
      <link href="/2020/09/02/dockerfile-ji-ben-cao-zuo/"/>
      <url>/2020/09/02/dockerfile-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><p>FROM imaage_name:tag<br> 定义了使用哪个基础镜像启动构建流程</p></li><li><p>MAINTAINER user_name<br> 声明镜像的创建者</p></li><li><p>ENV key value<br> 设置环境变量(可以写多条)</p></li><li><p>RUN command<br> Dockerfile的核心部分(可以写多条)</p></li><li><p>ADD source_dir/file dest_dir/file<br> 将宿主机文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</p></li><li><p>COPY source_dir/file dest_dir/file<br> 和add相似，但是如果有压缩文件并不能解压</p></li><li><p>WORKDIR path_dir<br> 设置工作目录</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基本操作</title>
      <link href="/2020/08/25/docker-ji-ben-cao-zuo/"/>
      <url>/2020/08/25/docker-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>本教程基于CentOS7</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h3 id="使用yum安装"><a href="#使用yum安装" class="headerlink" title="使用yum安装"></a>使用yum安装</h3><ol><li><p>升级yum</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> yum update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装社区版</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看安装是否成功</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="使用脚本安装"><a href="#使用脚本安装" class="headerlink" title="使用脚本安装"></a>使用脚本安装</h3><pre class="line-numbers language-bash"><code class="language-bash">任意执行以下一个命令即可$ curl -fsSL https://get.docker.com/ <span class="token operator">|</span> <span class="token function">sudo</span> sh$ <span class="token function">sudo</span> <span class="token function">wget</span> -qO- https://get.docker.com/ <span class="token operator">|</span> <span class="token function">bash</span>$ curl -fsSL https://get.docker.com -o get-docker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置USTC镜像"><a href="#设置USTC镜像" class="headerlink" title="设置USTC镜像"></a>设置USTC镜像</h2><p>加快docker镜像的下载速度<br>编辑文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入以下内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span>    <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://docker.mirrors.ustc.edu.cn"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="docker启动与停止"><a href="#docker启动与停止" class="headerlink" title="docker启动与停止"></a>docker启动与停止</h2><p>systemctl 是系统服务管理器指令</p><ol><li><p>开机启动</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> systemctl <span class="token function">enable</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>停止</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> systemctl stop docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动docker</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> systemctl statr docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重启</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看docker状态</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> systemctl status docker <span class="token function">sudo</span> docker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>docker帮助</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h2><ol><li><p>查看镜像</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>搜索镜像</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker search <span class="token punctuation">[</span>image_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>拉取镜像</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker pull <span class="token punctuation">[</span>image_name:version<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 如果没有版本号，默认拉取latest镜像</p></li><li><p>删除镜像</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker rmi <span class="token punctuation">[</span>image_id<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除所有镜像</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker rmi <span class="token variable"><span class="token variable">`</span>docker images -q<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h2><ol><li><p>查看容器</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看所有容器</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker <span class="token function">ps</span> -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看指定容器</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看最后一次运行的容器</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker <span class="token function">ps</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看停止的所有容器</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker <span class="token function">ps</span> -f status<span class="token operator">=</span>exited`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入容器</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker <span class="token function">exec</span> -it <span class="token punctuation">[</span>container_name<span class="token punctuation">]</span> /bin/bash <span class="token comment" spellcheck="true">## 方法1</span> <span class="token function">sudo</span> docker attach <span class="token punctuation">[</span>container_name<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">## 方法2(这个不推荐使用，因为每次退出终端，container就停止运行了)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>退出容器</p><pre class="line-numbers language-bash"><code class="language-bash"> CTRL + D <span class="token comment" spellcheck="true">## 方法1</span> 输入exit <span class="token comment" spellcheck="true">## 方法2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>停止容器</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker stop <span class="token punctuation">[</span>container_id/container_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动容器</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker statr <span class="token punctuation">[</span>container_id/container_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>容器与宿主机之间的文件拷贝</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> docker <span class="token function">cp</span> <span class="token punctuation">[</span>本机路径<span class="token punctuation">]</span> <span class="token punctuation">[</span>容器名称:路径<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">## 拷入</span><span class="token function">sudo</span> docker <span class="token function">cp</span> <span class="token punctuation">[</span>容器名称:路径<span class="token punctuation">]</span> <span class="token punctuation">[</span>本机路径<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">## 拷出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建并启动新的容器</p><a href="/2020/08/25/docker-jenkins-chi-xu-ji-cheng/" title="点击这里查看这篇文章">点击这里查看这篇文章</a></li><li><p>查看容器信息</p><pre class="line-numbers language-bash"><code class="language-bash">输出容器的所有信息<span class="token function">sudo</span> docker inspect <span class="token punctuation">[</span>container_id/container_name<span class="token punctuation">]</span>查看其中指定的信息<span class="token function">sudo</span> docker insperct --format<span class="token operator">=</span><span class="token string">'{{.NetWorkSettings.IPAddress}}'</span> <span class="token punctuation">[</span>container_id/container_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除容器</p><pre class="line-numbers language-bash"><code class="language-bash">删除之前需要先停止运行的容器<span class="token function">sudo</span> docker <span class="token function">rm</span> <span class="token punctuation">[</span>container_id/container_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><ol><li><p>把container打包成image</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker commit <span class="token punctuation">[</span>container_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>new_image_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>把image保存为文件，方便备份和迁移</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker save -o <span class="token punctuation">[</span>file_name.tar<span class="token punctuation">]</span> <span class="token punctuation">[</span>image_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>文件恢复成镜像</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker load -i <span class="token punctuation">[</span>file_name.tar<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="docker仓库的搭建"><a href="#docker仓库的搭建" class="headerlink" title="docker仓库的搭建"></a>docker仓库的搭建</h2><ol><li><p>拉取registry镜像</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker pull registery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker run -di --name registry -p 5000:5000 registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加信任</p><pre class="line-numbers language-bash"><code class="language-bash"> 1. <span class="token function">vi</span> /etc/docker/deamon.json 2. 添加 <span class="token punctuation">{</span>     <span class="token string">"insecure-registries"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"xxxx:5000"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> xxx表示宿主机的ip地址 3. 重启服务 <span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将镜像上传到私有仓库</p><pre class="line-numbers language-bash"><code class="language-bash"> 1. 打tag <span class="token function">sudo</span> docker tag <span class="token punctuation">[</span>iamge_id<span class="token punctuation">]</span> <span class="token punctuation">[</span>ip_address<span class="token punctuation">]</span>:<span class="token punctuation">[</span>port<span class="token punctuation">]</span>/<span class="token punctuation">[</span>image_id<span class="token punctuation">]</span> eg: <span class="token function">sudo</span> docker tag jdk-1.8 192.168.100.11:5000/jdk-1.8 2. 上传 <span class="token function">sudo</span> docker push <span class="token punctuation">[</span>ip_address<span class="token punctuation">]</span>:<span class="token punctuation">[</span>port<span class="token punctuation">]</span>/<span class="token punctuation">[</span>image_id<span class="token punctuation">]</span> eg: <span class="token function">sudo</span> docker psuh 192.168.100.11:5000/jdk-1.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker+jenkins 持续集成</title>
      <link href="/2020/08/25/docker-jenkins-chi-xu-ji-cheng/"/>
      <url>/2020/08/25/docker-jenkins-chi-xu-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Red-Hat-Docker-安装"><a href="#Red-Hat-Docker-安装" class="headerlink" title="Red Hat Docker 安装"></a>Red Hat Docker 安装</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><pre class="line-numbers language-bash"><code class="language-bash">$ curl -sSL https://get.daocloud.io/docker <span class="token operator">|</span> sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动</span>$ <span class="token function">sudo</span> systemctl start docker<span class="token comment" spellcheck="true"># 重启</span>$ <span class="token function">sudo</span> systemctl restart docker<span class="token comment" spellcheck="true"># 重启</span>$ <span class="token function">sudo</span> <span class="token function">service</span> docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h3><pre class="line-numbers language-bash"><code class="language-bash">$ docker --versionDocker version 19.03.12, build 48a66213fe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoLoaded plugins: fastestmirroradding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repograbbing <span class="token function">file</span> http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.reporepo saved to /etc/yum.repos.d/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h3><ol><li><p>网易</p><pre class="line-numbers language-bash"><code class="language-bash"> $ <span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker $ <span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span> <span class="token punctuation">{</span>     <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 配置完成后记得重启<code>docker</code>服务</p><pre class="line-numbers language-bash"><code class="language-bash"> $ <span class="token function">sudo</span> systemctl daemon-reload $ <span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>阿里云(推荐使用)</p><p> 登录 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories" target="_blank" rel="noopener">阿里云</a></p><p> 选择左侧菜单<code>镜像加速器</code>，上面有配置方法和加速器地址</p></li><li><p>daocloud</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token operator">></span> $ curl -sSL <span class="token operator">&lt;</span>https://get.daocloud.io/daotools/set_mirror.sh<span class="token operator">></span> <span class="token operator">|</span> sh -s <span class="token operator">&lt;</span>http://f1361db2.m.daocloud.io<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>测试镜像下载速度的脚本</p><pre class="line-numbers language-bash"><code class="language-bash"> $ curl -sSL <span class="token operator">&lt;</span>https://cdn.jsdelivr.net/gh/lework/script/shell/docker_hub_speed_test.sh<span class="token operator">></span> <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="安装-jenkins"><a href="#安装-jenkins" class="headerlink" title="安装 jenkins"></a>安装 jenkins</h2><h3 id="查看jenkins-版本"><a href="#查看jenkins-版本" class="headerlink" title="查看jenkins 版本"></a>查看jenkins 版本</h3><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> docker search jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="pull一个镜像"><a href="#pull一个镜像" class="headerlink" title="pull一个镜像"></a>pull一个镜像</h3><p>使用官方推荐的镜像(下载太慢记得配置镜像加速，推荐使用阿里云)</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> docker pull jenkinsci/blueoceanUsing default tag: latestlatest: Pulling from jenkinsci/blueoceandf20fa9351a1: Pull complete1cb481a13af0: Pull completef5efbd400588: Pull complete4d25cfa48d88: Pull complete1bc71b1e3fbd: Pull complete0215630c2b8d: Pull completeb9a8d0388f94: Pull complete4edf5a184073: Pull complete2e52212eaba2: Pull completef9c1c600b078: Pull complete123357adf793: Pull complete058df73922fe: Pull complete38612d91e32d: Pull completecfb97945d6b1: Pull completee685a981a3a2: Pull completeDigest: sha256:f126e425591c697830c17d178e8e209ef6d9fd3c871ceca80dba5d2b1256a291Status: Downloaded newer image <span class="token keyword">for</span> jenkinsci/blueocean:latestdocker.io/jenkinsci/blueocean:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动一个jenkins容器"><a href="#启动一个jenkins容器" class="headerlink" title="启动一个jenkins容器"></a>启动一个jenkins容器</h3><ol><li><p>参数简介</p><pre class="line-numbers language-bash"><code class="language-bash"> docker run \ -u root \ --name jenkins-blueocean --rm \ -d \ -p 8080:8080 \ -p 50000:50000 \ -v jenkins-data:/var/jenkins_home \ -v /var/run/docker.sock:/var/run/docker.sock \ --restart<span class="token operator">=</span>always \ jenkinsci/blueocean \ /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>-u</code>: 创建容器时使用的用户</li><li><code>--name</code>: Docker容器的名字</li><li><code>--rm</code>: 退出容器时会删除所有用户数据，慎用</li><li><code>-d</code>(<code>--detach</code>): 在后台运行容器（即“分离”模式）并输出容器ID。如果您不指定此选项， 则在终端窗口中输出正在运行的此容器的Docker日志。</li><li><code>-p</code>(<code>--publish</code>): 第一个,将<code>jenkinsci/blueocean</code>容器的端口8080 映射（即“发布”）到主机上的端口8080。第一个数字表示主机上的端口，而最后一个数字表示容器的端口。因此，如果您-p 49000:8080为此选项指定，则将通过端口49000访问主机上的Jenkins。</li><li><code>-p</code>: 第二个,是有多个jenkins服务时，主备之间通信使用的，单个机器可以不用</li><li><code>-v</code>: 第一个，将容器的/var/jenkins_home目录，映射到本机的jenkins-data目录（如果没有这个选项，jenkins的历史数据将不会保存，每次启动都是新的），jenkins-data目录如果不存在，会自动创建</li><li><code>--restart=always</code> 重启docker,container也会自动重启</li><li><code>jenkinsci/blueocean</code>: jenkins images，如果不存在，会自动下载，所以这个一定要和自己下载的镜像名称一致，不然会下载其他的jenkins images</li><li><code>/bin/bash</code> 自动进入容器内部</li></ul></li><li><p>创建实例</p><pre class="line-numbers language-bash"><code class="language-bash"> $ <span class="token function">sudo</span> docker run -d --name jenkins_01 -p 8081:8080 -v /home/bbd/tools/jenkins_home:/var/jenkins_01 jenkinsci/blueocean 3afe63de9b9eebfe486e1417e7071c3e95d9606e2a36521a7d70afa98e4c660d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看创建的images</p><pre class="line-numbers language-bash"><code class="language-bash"> $ <span class="token function">sudo</span> docker <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> jenkins 3afe63de9b9e        jenkinsci/blueocean   <span class="token string">"/sbin/tini -- /usr/…"</span>   About a minute ago   Up About a minute   50000/tcp, 0.0.0.0:8081-<span class="token operator">></span>8080/tcp   jenkins_01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>访问web页面</p><p> <code>http://10.28.200.233:8081/</code><br> 需要输入密码，密码查看步骤5</p></li><li><p>进入images内部,查看密码</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> docker <span class="token function">exec</span> -it jenkins_01 <span class="token function">bash</span> bash-5.0$ <span class="token function">cat</span> /var/jenkins_home/secrets/initialAdminPassword xxxxxxxxxxxxxxxxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>其他常用命令</p><p> 退出images container： <code>ctrl + D</code></p><p> 查看images container id : <code>sudo docker ps | grep jenkins</code></p><p> 重启images container: <code>sudo docker restart ${container_id}</code></p></li></ol><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">$ docker rmi jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装jenkins插件"><a href="#安装jenkins插件" class="headerlink" title="安装jenkins插件"></a>安装jenkins插件</h2><h3 id="java项目"><a href="#java项目" class="headerlink" title="java项目"></a>java项目</h3><p>1.</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/54147784" target="_blank" rel="noopener">知乎： 史上最全（全平台）docker安装方法</a></li><li><a href="https://www.jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">jenkins官方文档中文版</a></li><li><a href="https://www.jenkins.io/doc/book/installing/" target="_blank" rel="noopener">jenkins官方文档原版</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python常见问题合集</title>
      <link href="/2020/08/17/python-chang-jian-wen-ti-he-ji/"/>
      <url>/2020/08/17/python-chang-jian-wen-ti-he-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h2><p>以下多个问题操作，均没有配置anaconda为系统环境变量</p><h3 id="多个虚拟环境安装"><a href="#多个虚拟环境安装" class="headerlink" title="多个虚拟环境安装"></a>多个虚拟环境安装</h3><p>如果系统中已经安装了python，但是不同的开发环境对python的版本和第三库的版本要求不同，这个时候就可以通过anaconda安装多个虚拟环境解决</p><h3 id="pip-安装第三方库"><a href="#pip-安装第三方库" class="headerlink" title="pip 安装第三方库"></a>pip 安装第三方库</h3><p>anaconda中安装第三方库怎么操作呢？<br>进入anaconda的安装目录，进入<code>/Scripts</code>目录，然后执行pip命令即可成功安装</p><blockquote><p>pip install xxx</p></blockquote><h3 id="pip-升级"><a href="#pip-升级" class="headerlink" title="pip 升级"></a>pip 升级</h3><p>进入anaconda根目录，也就是python.exe的目录</p><blockquote><p>python -m pip install –uprade pip</p></blockquote><p>或者在pip.exe所在目录</p><blockquote><p>pip install pip -U</p></blockquote><h3 id="配置第三方镜像源"><a href="#配置第三方镜像源" class="headerlink" title="配置第三方镜像源"></a>配置第三方镜像源</h3><p>以下的一次性生效的配置，不用修改配置文件，windows和linux都直接通过cli解决，本人比较喜欢的阿里源</p><blockquote><p>pip config set global.index-url <a href="https://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">https://mirrors.aliyun.com/pypi/simple/</a><br>pip config set install.trusted-host mirrors.aliyun.com</p></blockquote><p>清华源</p><blockquote><p><a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p></blockquote><p>还有个临时的方法</p><blockquote><p>pip install xxx -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-kafka基本操作</title>
      <link href="/2020/08/17/shell-kafka-ji-ben-cao-zuo/"/>
      <url>/2020/08/17/shell-kafka-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建Topic</h2><blockquote><p>bin/kafka-topics.sh –zookeeper localhost:2181 –create –topic test –replication-factor 3 –partitions 3</p></blockquote><p>##</p>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-kafka基本操作</title>
      <link href="/2020/08/17/python-kafka-ji-ben-cao-zuo/"/>
      <url>/2020/08/17/python-kafka-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>pip install kafka-python</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">D:\anaconda3\Scripts<span class="token operator">></span>pip <span class="token function">install</span> kafka-pythonLooking <span class="token keyword">in</span> indexes: https://mirrors.aliyun.com/pypi/simple/Collecting kafka-python  Downloading https://mirrors.aliyun.com/pypi/packages/aa/34/12f219f7f9e68e79a54874d26fbe974db1ab4efac4e6dae665b421df48f9/kafka_python-2.0.1-py2.py3-none-any.whl <span class="token punctuation">(</span>232 kB<span class="token punctuation">)</span>     <span class="token operator">|</span>██████████████                  <span class="token operator">|</span> 102 kB 1.7 MB/s eta 0:00:0     <span class="token operator">|</span>███████████████▌                <span class="token operator">|</span> 112 kB 1.7 MB/s eta 0:00     <span class="token operator">|</span>█████████████████               <span class="token operator">|</span> 122 kB 1.7 MB/s eta 0:0     <span class="token operator">|</span>██████████████████▌             <span class="token operator">|</span> 133 kB 1.7 MB/s eta 0     <span class="token operator">|</span>████████████████████            <span class="token operator">|</span> 143 kB 1.7 MB/s eta     <span class="token operator">|</span>█████████████████████           <span class="token operator">|</span> 153 kB 1.7 MB/s eta     <span class="token operator">|</span>██████████████████████▌         <span class="token operator">|</span> 163 kB 1.7 MB/s e     <span class="token operator">|</span>████████████████████████        <span class="token operator">|</span> 174 kB 1.7 MB/s     <span class="token operator">|</span>█████████████████████████▌      <span class="token operator">|</span> 184 kB 1.7 MB/     <span class="token operator">|</span>███████████████████████████     <span class="token operator">|</span> 194 kB 1.7 MB     <span class="token operator">|</span>████████████████████████████    <span class="token operator">|</span> 204 kB 1.7 M     <span class="token operator">|</span>█████████████████████████████▌  <span class="token operator">|</span> 215 kB 1.7     <span class="token operator">|</span>███████████████████████████████ <span class="token operator">|</span> 225 kB 1.     <span class="token operator">|</span>████████████████████████████████<span class="token operator">|</span> 232 kB 1.7 MB/sInstalling collected packages: kafka-pythonSuccessfully installed kafka-python-2.0.1D:\anaconda3\Scripts<span class="token operator">>></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装的时候遇到一个坑,<code>anaconda</code>报错</p><blockquote><p>Could not fetch URL <a href="https://mirrors.aliyun.com/pypi/simple/pip/" target="_blank" rel="noopener">https://mirrors.aliyun.com/pypi/simple/pip/</a>: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=’mirrors.aliyun.com’, port=443): Max retries exceeded with url: /pypi/simple/pip/ (Caused by SSLError(“Can’t connect to HTTPS URL because the SSL module is not available.”)) - skipping</p></blockquote><p>测试python <code>import ssl</code>，如果import失败，修改环境变量下的<code>用户变量</code>中的<code>PATH</code>，包含以下三个值则不会报错</p><blockquote><p>D:\anaconda3;<br>D:\anaconda3\Scripts;<br>D:\anaconda3\Library\bin;</p></blockquote><h2 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> kafka <span class="token keyword">import</span> KafkaProducer<span class="token keyword">from</span> kafka<span class="token punctuation">.</span>errors <span class="token keyword">import</span> KafkaErrorproducer <span class="token operator">=</span> KafkaProducer<span class="token punctuation">(</span>bootstrap_servers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'broker1:1234'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Asynchronous by default</span>future <span class="token operator">=</span> producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'my-topic'</span><span class="token punctuation">,</span> b<span class="token string">'raw_bytes'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Block for 'synchronous' sends</span><span class="token keyword">try</span><span class="token punctuation">:</span>    record_metadata <span class="token operator">=</span> future<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">except</span> KafkaError<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Decide what to do if produce request failed...</span>    log<span class="token punctuation">.</span>exception<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># Successful result returns assigned partition and offset</span><span class="token keyword">print</span> <span class="token punctuation">(</span>record_metadata<span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>record_metadata<span class="token punctuation">.</span>partition<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>record_metadata<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># produce keyed messages to enable hashed partitioning</span>producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'my-topic'</span><span class="token punctuation">,</span> key<span class="token operator">=</span>b<span class="token string">'foo'</span><span class="token punctuation">,</span> value<span class="token operator">=</span>b<span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># encode objects via msgpack</span>producer <span class="token operator">=</span> KafkaProducer<span class="token punctuation">(</span>value_serializer<span class="token operator">=</span>msgpack<span class="token punctuation">.</span>dumps<span class="token punctuation">)</span>producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'msgpack-topic'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># produce json messages</span>producer <span class="token operator">=</span> KafkaProducer<span class="token punctuation">(</span>value_serializer<span class="token operator">=</span><span class="token keyword">lambda</span> m<span class="token punctuation">:</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'json-topic'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># produce asynchronously</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'my-topic'</span><span class="token punctuation">,</span> b<span class="token string">'msg'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">on_send_success</span><span class="token punctuation">(</span>record_metadata<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>record_metadata<span class="token punctuation">.</span>topic<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>record_metadata<span class="token punctuation">.</span>partition<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>record_metadata<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">on_send_error</span><span class="token punctuation">(</span>excp<span class="token punctuation">)</span><span class="token punctuation">:</span>    log<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'I am an errback'</span><span class="token punctuation">,</span> exc_info<span class="token operator">=</span>excp<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># handle exception</span><span class="token comment" spellcheck="true"># produce asynchronously with callbacks</span>producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'my-topic'</span><span class="token punctuation">,</span> b<span class="token string">'raw_bytes'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_callback<span class="token punctuation">(</span>on_send_success<span class="token punctuation">)</span><span class="token punctuation">.</span>add_errback<span class="token punctuation">(</span>on_send_error<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># block until all async messages are sent</span>producer<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># configure multiple retries</span>producer <span class="token operator">=</span> KafkaProducer<span class="token punctuation">(</span>retries<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://github.com/dpkp/kafka-python" target="_blank" rel="noopener">kafka-python github地址</a><br><a href="https://pypi.org/project/kafka-python/" target="_blank" rel="noopener">kafka-python 官网</a><br><a href="https://kafka-python.readthedocs.io/en/master/" target="_blank" rel="noopener">kafka-python API</a></p>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切换码云</title>
      <link href="/2020/08/11/qie-huan-ma-yun/"/>
      <url>/2020/08/11/qie-huan-ma-yun/</url>
      
        <content type="html"><![CDATA[<p>此文章只是为了解决没有梯子，访问<code>Github Pages</code>太慢的问题，所以克隆一份到<code>gitee</code>，便于加快访问速度和被百度收录</p><h2 id="注册码云"><a href="#注册码云" class="headerlink" title="注册码云"></a>注册码云</h2><p>点击<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a>注册有一个账户，然后点击右上角的<code>+</code>号，选择新建仓库，<font face="黑体" color="red">仓库名一定要和自己的账户一致</font>，避免出现deploy后css样式无法加载的问题，语言选择<code>JavaScript</code>（这个参考其他文档的，没有验证过必要性），其他选择默认，或者根据情况勾选即可。</p><h2 id="建了SSH链接"><a href="#建了SSH链接" class="headerlink" title="建了SSH链接"></a>建了SSH链接</h2><p>访问本机目录<code>C:\Users\SlimShady\.ssh</code>，拷贝<code>id_rsa.pub</code>文件中的内容，在码云首页，点击右上角头像，选择<code>设置</code>，在左侧菜单栏的<code>安全设置中</code>找到<code>SSH公钥</code>，把本机的秘钥粘贴进去即可。</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>修改根目录的<code>_config.yml</code>：</p><pre class="line-numbers language-yml"><code class="language-yml">url: https://gitee.com/slimshadylin/slimshadylin.gitroot: /deploy:- type: git  repository:    gitee: git@gitee.com:slimshadylin/slimshadylin.git    # github: git@github.com:SlimShadyBaby/SlimShadyBaby.github.io.git  branch: master- type: baidu_url_submitter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>新建一个<code>run.sh</code>的文件，内容如下，每次写完文章后就可以<code>deploy</code>到<code>master</code>分支，然后把未渲染的代码保存到<code>hexo</code>分支，方便多设备同步编辑。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo ghexo d<span class="token function">git</span> add -A<span class="token function">git</span> commit -m <span class="token string">"<span class="token variable">$1</span>"</span><span class="token function">git</span> push origin master:hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>由于<code>gitee</code>个人版已经不支持<code>gitee pages pro</code>，所以暂时无法提供支持，这部分还是放到<code>github pages</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+githubPages搭建个人博客</title>
      <link href="/2020/08/11/hexo-githubpages-da-jian-ge-ren-bo-ke/"/>
      <url>/2020/08/11/hexo-githubpages-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>安装node.js</li><li>安装git</li><li>注册github账号</li><li>安装hexo</li><li>写文章、发布文章</li><li>绑定域名</li></ul><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ol><li>生成新的<code>SSH Key</code></li></ol><blockquote><p>ssh-keygen -t rsa -b 4096 -C “您的Github邮箱地址”</p></blockquote><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>可以选择自己喜欢的服务商，以下已阿里云为例，首先下载一个<code>阿里云</code>APP，在<code>域名注册</code>页面输入自己想要的域名，如我的<code>slimshadylin</code>，然后选择一个自己喜欢的后缀，不同的后缀有不同的价格，后续根据提示操作即可</p><p>然后找到自己购买的域名页面<br><img src="domain.jpg" alt="域名管理"></p><p>按照如下进行编辑,github的ip地址，自己ping以下xxx.github.io即可<br><img src="domain1.jpg" alt="域名解析"><br><img src="domain2.jpg" alt="域名解析"></p><p>最后修改githubPages设置</p><ul><li>进入<code>github pages</code>对应的仓库首界面</li><li>点击<code>Settings</code>，进入这个仓库的设置界面</li><li>找到<code>GitHub Pages</code>配置栏，勾选<code>Enforce HTTPS</code>,如果不可勾选，可能是阿里云的域名认证没有通过，或者是域名刚买，等两个小时就可以操作了</li></ul><p>最后就可以通过自己的域名，愉快的访问自己的博客啦</p>]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
